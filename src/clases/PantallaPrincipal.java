package clases;

import clases.Odp.SemanaODP;
import clases.Tasa_Precios.TasaDePrecios;
import clases.Tasas_USD.TasaBsUSD;
import clases.proveedores.*;
import clases.anticipos.*;
import clases.boletos.*;
import clases.transacciones.*;
import clases.tarifa_estandar.*;
import com.itextpdf.text.Document;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

import com.sun.org.apache.bcel.internal.generic.AALOAD;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import logica.*;

public class PantallaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form PantallaPrincipal
     */
    //CREACION DE TODOS LAS INTERFACES
    private IdentificacionProveedor IP = new IdentificacionProveedor();
    private TasaDePrecios TDP;
    private IdentificacionProveedorTransacciones IPT;
    private TransaccionesConsultarModificar1 TCM;
    private CreacionBoleto CB;
    private IdentificacionBoleto IB;
    private BusquedaYModificicacionBoleto BYM;
    private TablaProveedores TP;
    private CreacionTarifa CreacionT;
    private TablaTarifas TablaT;
    private TablaAnticipos TablaA;
    private conectate con;
    private TasaDePrecios TasaPrecios;
    private TasaBsUSD TasaUSD;
    private SemanaODP pantallaSemana;
    private proveedor p = new proveedor();
    private Tasa_USD tUSD = new Tasa_USD();
    private transacciones trs = new transacciones();
    private anticipos ant = new anticipos();
    private boleto b = new boleto();
    private Tasa_Precios tp = new Tasa_Precios();
    private Tarifa_Estandar te = new Tarifa_Estandar();

    public PantallaPrincipal() {
        initComponents();
        con = new conectate();
        setResizable(false);
        cerrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        FONDO = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        M_Archivo = new javax.swing.JMenu();
        MI_Cerrar = new javax.swing.JMenuItem();
        MI_CerrarTodo = new javax.swing.JMenuItem();
        MI_Guardar = new javax.swing.JMenuItem();
        M_Proveedor = new javax.swing.JMenu();
        MI_Agregar = new javax.swing.JMenuItem();
        MI_MostrarProveedores = new javax.swing.JMenuItem();
        M_Transaccion = new javax.swing.JMenu();
        MI_CrearTransaccion = new javax.swing.JMenuItem();
        MI_ConsultarModificarTransaccion = new javax.swing.JMenuItem();
        M_ODP = new javax.swing.JMenu();
        MI_GenerarReporte = new javax.swing.JMenuItem();
        MI_GenerarODP = new javax.swing.JMenuItem();
        M_Anticipos = new javax.swing.JMenu();
        MI_CrearA = new javax.swing.JMenuItem();
        MI_ManejoAnticipos = new javax.swing.JMenuItem();
        M_Valores = new javax.swing.JMenu();
        MI_TasaUSD = new javax.swing.JMenuItem();
        MI_TasaDePrecios = new javax.swing.JMenuItem();
        M_Boletos = new javax.swing.JMenu();
        MI_CrearBoleto = new javax.swing.JMenuItem();
        MI_ManejoBoletos = new javax.swing.JMenuItem();
        M_Tarifa_Estandar = new javax.swing.JMenu();
        MI_CrearT = new javax.swing.JMenuItem();
        MI_BuscarModificarT = new javax.swing.JMenuItem();
        M_Reportes = new javax.swing.JMenu();
        MI_ReporteProveedor = new javax.swing.JMenuItem();
        MI_ReporteAnticipo = new javax.swing.JMenuItem();
        MI_ReporteTransacciones = new javax.swing.JMenuItem();
        MI_ReporteBoleto = new javax.swing.JMenuItem();
        MI_ReporteTarifas = new javax.swing.JMenuItem();
        MI_ReporteTasaDePrecios = new javax.swing.JMenuItem();
        MI_ReporteTasaUSD = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        FONDO.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ICONO PROG PANT COMPL.png"))); // NOI18N

        M_Archivo.setText("Archivo");

        MI_Cerrar.setText("Cerrar");
        M_Archivo.add(MI_Cerrar);

        MI_CerrarTodo.setText("Cerrar Todo");
        M_Archivo.add(MI_CerrarTodo);

        MI_Guardar.setText("Guardar");
        MI_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_GuardarActionPerformed(evt);
            }
        });
        M_Archivo.add(MI_Guardar);

        MenuBar.add(M_Archivo);

        M_Proveedor.setText("Proveedor");

        MI_Agregar.setText("Agregar");
        MI_Agregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_AgregarActionPerformed(evt);
            }
        });
        M_Proveedor.add(MI_Agregar);

        MI_MostrarProveedores.setText("Manejo de datos de Proveedores");
        MI_MostrarProveedores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_MostrarProveedoresActionPerformed(evt);
            }
        });
        M_Proveedor.add(MI_MostrarProveedores);

        MenuBar.add(M_Proveedor);

        M_Transaccion.setText("Transacci√≥n");

        MI_CrearTransaccion.setText("Crear");
        MI_CrearTransaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_CrearTransaccionActionPerformed(evt);
            }
        });
        M_Transaccion.add(MI_CrearTransaccion);

        MI_ConsultarModificarTransaccion.setText("Consultar/Modificar");
        MI_ConsultarModificarTransaccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ConsultarModificarTransaccionActionPerformed(evt);
            }
        });
        M_Transaccion.add(MI_ConsultarModificarTransaccion);

        MenuBar.add(M_Transaccion);

        M_ODP.setText("ODP");

        MI_GenerarReporte.setText("Simulacro de Orden de Pago");
        MI_GenerarReporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_GenerarReporteActionPerformed(evt);
            }
        });
        M_ODP.add(MI_GenerarReporte);

        MI_GenerarODP.setText("Generar ODP");
        MI_GenerarODP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_GenerarODPActionPerformed(evt);
            }
        });
        M_ODP.add(MI_GenerarODP);

        MenuBar.add(M_ODP);

        M_Anticipos.setText("Anticipos");

        MI_CrearA.setText("Crear");
        MI_CrearA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_CrearAActionPerformed(evt);
            }
        });
        M_Anticipos.add(MI_CrearA);

        MI_ManejoAnticipos.setText("Manejo de Anticipos");
        MI_ManejoAnticipos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ManejoAnticiposActionPerformed(evt);
            }
        });
        M_Anticipos.add(MI_ManejoAnticipos);

        MenuBar.add(M_Anticipos);

        M_Valores.setText("Valores");

        MI_TasaUSD.setText("Tasa USD");
        MI_TasaUSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_TasaUSDActionPerformed(evt);
            }
        });
        M_Valores.add(MI_TasaUSD);

        MI_TasaDePrecios.setText("Tasa de Precios");
        MI_TasaDePrecios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_TasaDePreciosActionPerformed(evt);
            }
        });
        M_Valores.add(MI_TasaDePrecios);

        MenuBar.add(M_Valores);

        M_Boletos.setText("Boletos");

        MI_CrearBoleto.setText("Crear Boleto");
        MI_CrearBoleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_CrearBoletoActionPerformed(evt);
            }
        });
        M_Boletos.add(MI_CrearBoleto);

        MI_ManejoBoletos.setText("Manejo de Boletos");
        MI_ManejoBoletos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ManejoBoletosActionPerformed(evt);
            }
        });
        M_Boletos.add(MI_ManejoBoletos);

        MenuBar.add(M_Boletos);

        M_Tarifa_Estandar.setText("Tarifa_Estandar");

        MI_CrearT.setText("A√±adir Tarifa");
        MI_CrearT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_CrearTActionPerformed(evt);
            }
        });
        M_Tarifa_Estandar.add(MI_CrearT);

        MI_BuscarModificarT.setText("Consultar Tarifa");
        MI_BuscarModificarT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_BuscarModificarTActionPerformed(evt);
            }
        });
        M_Tarifa_Estandar.add(MI_BuscarModificarT);

        MenuBar.add(M_Tarifa_Estandar);

        M_Reportes.setText("Reportes");

        MI_ReporteProveedor.setText("Reporte Proveedores ");
        MI_ReporteProveedor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ReporteProveedorActionPerformed(evt);
            }
        });
        M_Reportes.add(MI_ReporteProveedor);

        MI_ReporteAnticipo.setText("Reporte Anticipos");
        MI_ReporteAnticipo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ReporteAnticipoActionPerformed(evt);
            }
        });
        M_Reportes.add(MI_ReporteAnticipo);

        MI_ReporteTransacciones.setText("Reporte Transacciones");
        MI_ReporteTransacciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ReporteTransaccionesActionPerformed(evt);
            }
        });
        M_Reportes.add(MI_ReporteTransacciones);

        MI_ReporteBoleto.setText("Reporte Boletos");
        MI_ReporteBoleto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ReporteBoletoActionPerformed(evt);
            }
        });
        M_Reportes.add(MI_ReporteBoleto);

        MI_ReporteTarifas.setText("Reporte Tarifas");
        MI_ReporteTarifas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ReporteTarifasActionPerformed(evt);
            }
        });
        M_Reportes.add(MI_ReporteTarifas);

        MI_ReporteTasaDePrecios.setText("Reporte Tasa de Precios");
        MI_ReporteTasaDePrecios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ReporteTasaDePreciosActionPerformed(evt);
            }
        });
        M_Reportes.add(MI_ReporteTasaDePrecios);

        MI_ReporteTasaUSD.setText("Reporte de Tasa USD");
        MI_ReporteTasaUSD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MI_ReporteTasaUSDActionPerformed(evt);
            }
        });
        M_Reportes.add(MI_ReporteTasaUSD);

        MenuBar.add(M_Reportes);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(FONDO)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(FONDO, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void MI_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_GuardarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_MI_GuardarActionPerformed

    private void MI_AgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_AgregarActionPerformed
        IP.setVisible(true);
        IP.modo = 1;
    }//GEN-LAST:event_MI_AgregarActionPerformed

    private void MI_CrearAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_CrearAActionPerformed
        IP.setVisible(true);
        IP.modo = 2;
    }//GEN-LAST:event_MI_CrearAActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        con.desconectar();
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        con.desconectar();
    }//GEN-LAST:event_formWindowClosing

    private void MI_CrearTransaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_CrearTransaccionActionPerformed
        IPT = new IdentificacionProveedorTransacciones();
        IPT.setVisible(true);
    }//GEN-LAST:event_MI_CrearTransaccionActionPerformed

    private void MI_ConsultarModificarTransaccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ConsultarModificarTransaccionActionPerformed
        TCM = new TransaccionesConsultarModificar1();
        TCM.setVisible(true);
    }//GEN-LAST:event_MI_ConsultarModificarTransaccionActionPerformed

    private void MI_CrearBoletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_CrearBoletoActionPerformed
        IB = new IdentificacionBoleto();
        IB.setVisible(true);
    }//GEN-LAST:event_MI_CrearBoletoActionPerformed

    private void MI_ManejoBoletosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ManejoBoletosActionPerformed
        BYM = new BusquedaYModificicacionBoleto();
        BYM.setVisible(true);
    }//GEN-LAST:event_MI_ManejoBoletosActionPerformed

    private void MI_MostrarProveedoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_MostrarProveedoresActionPerformed
        TP = new TablaProveedores();
        TP.modo = 0;
        TP.setVisible(true);
    }//GEN-LAST:event_MI_MostrarProveedoresActionPerformed

    private void MI_CrearTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_CrearTActionPerformed
        CreacionT = new CreacionTarifa();
        CreacionT.setVisible(true);
    }//GEN-LAST:event_MI_CrearTActionPerformed

    private void MI_BuscarModificarTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_BuscarModificarTActionPerformed
        TablaT = new TablaTarifas();
        TablaT.setVisible(true);
    }//GEN-LAST:event_MI_BuscarModificarTActionPerformed

    private void MI_ManejoAnticiposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ManejoAnticiposActionPerformed
        TablaA = new TablaAnticipos();
        TablaA.setVisible(true);
    }//GEN-LAST:event_MI_ManejoAnticiposActionPerformed

    private void MI_TasaDePreciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_TasaDePreciosActionPerformed
        TasaPrecios = new TasaDePrecios();
        TasaPrecios.setVisible(true);
    }//GEN-LAST:event_MI_TasaDePreciosActionPerformed

    private void MI_TasaUSDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_TasaUSDActionPerformed
        TasaUSD = new TasaBsUSD();
        TasaUSD.setVisible(true);
    }//GEN-LAST:event_MI_TasaUSDActionPerformed

    private void MI_GenerarODPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_GenerarODPActionPerformed
        pantallaSemana = new SemanaODP();
        pantallaSemana.setVisible(true);
        pantallaSemana.modo_pantalla = 2;
    }//GEN-LAST:event_MI_GenerarODPActionPerformed

    private void MI_GenerarReporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_GenerarReporteActionPerformed
        pantallaSemana = new SemanaODP();
        pantallaSemana.setVisible(true);
        pantallaSemana.modo_pantalla = 1;
    }//GEN-LAST:event_MI_GenerarReporteActionPerformed

    private void MI_ReporteProveedorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ReporteProveedorActionPerformed
        int resp = JOptionPane.showConfirmDialog(null, "SE VA A PROCEDER A GENERAR EL REPORTE DE PROVEEDORES\n" + "¬øESTA SEGURO?",
                "GENERACION DE REPORTE", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE/*El tipo de ventana, en este caso WARNING*/);
        if (resp == JOptionPane.YES_OPTION) {
            // TODO add your handling code here:
            JFileChooser fc = new JFileChooser();

            //Abrimos la ventana, se guarda la opcion implementada por el usuario
            int seleccion = fc.showSaveDialog(this);

            //si el usuario pincha en aceptar
            if (seleccion == JFileChooser.APPROVE_OPTION) {

                //seleccionamos el fichero
                File fichero = fc.getSelectedFile();
                try {
                    Document documento = new Document();
                    try {
                        //SE LE COLOCA RUTA AL ARCHIVO + SU NOMBRE.PDF
                        //String ruta =  System.getProperty("user.home");
                        PdfWriter.getInstance(documento, new FileOutputStream(fichero));

                        Paragraph parrafo = new Paragraph();
                        parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                        parrafo.add("REPORTE DE PROVEEDORES \n\n");
                        parrafo.setFont(FontFactory.getFont("Arial", 30, Font.BOLD));

                        //SE LE COLOCA TAMA√ëO AL DOCUMENTO + ROTATE() QUE HACE COLOCARLO EN HORIZONTAL
                        documento.setPageSize(PageSize.A1.rotate());
                        // SE ABRE EL DOCUMENTO
                        documento.open();
                        documento.add(parrafo);
                        //SE CREA UN OBJETO TABLA DONDE GUARDAR LOS DATOS + TAMA√ëO
                        PdfPTable tabla = new PdfPTable(23);
                        //SE LE COLOCAN TITULO A CADA UNA DE LAS COLUMNAS
                        tabla.addCell("Codigo");
                        tabla.addCell("Identificacion");
                        tabla.addCell("Razon Social");
                        tabla.addCell("Direccion");
                        tabla.addCell("Municipio");
                        tabla.addCell("Telefono");
                        tabla.addCell("Email");
                        tabla.addCell("Cuadrilla");
                        tabla.addCell("Flete");
                        tabla.addCell("Peaje");
                        tabla.addCell("Materia Prima");
                        tabla.addCell("MP Acordado");
                        tabla.addCell("Cod Tarifa");
                        tabla.addCell("Nombre Beneficiario");
                        tabla.addCell("ID Beneficiario");
                        tabla.addCell("Correo Beneficiario");
                        tabla.addCell("Banco");
                        tabla.addCell("Num Cuenta");
                        tabla.addCell("Tipo Cuenta");
                        tabla.addCell("Modo Cuenta");
                        tabla.addCell("Nombre Aut");
                        tabla.addCell("ID Aut");
                        tabla.addCell("Estado Actividad");

                        try {
                            Object[][] data;
                            data = p.getDatos();
                            int CP = p.cantidadProveedores();

                            for (int i = 0; i < CP; i++) {
                                tabla.addCell(data[i][0].toString());
                                tabla.addCell(data[i][1].toString());
                                tabla.addCell(data[i][2].toString());
                                tabla.addCell(data[i][3].toString());
                                tabla.addCell(data[i][4].toString());
                                tabla.addCell(data[i][5].toString());
                                tabla.addCell(data[i][6].toString());
                                tabla.addCell(data[i][7].toString());
                                tabla.addCell(data[i][8].toString());
                                tabla.addCell(data[i][9].toString());
                                tabla.addCell(data[i][10].toString());
                                tabla.addCell(data[i][11].toString());
                                tabla.addCell(data[i][12].toString());
                                tabla.addCell(data[i][13].toString());
                                tabla.addCell(data[i][14].toString());
                                tabla.addCell(data[i][15].toString());
                                tabla.addCell(data[i][16].toString());
                                tabla.addCell(data[i][17].toString());
                                tabla.addCell(data[i][18].toString());
                                tabla.addCell(data[i][19].toString());
                                tabla.addCell(data[i][20].toString());
                                tabla.addCell(data[i][21].toString());
                                tabla.addCell(data[i][22].toString());
                            }

                            documento.add(tabla);
                        } catch (SQLException e) {
                            Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                        }
                        documento.close();

                        //SE CIERRA EL DOCUMENTO
                        documento.close();
                    } catch (Exception e) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                    }
                } catch (Exception e) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                }
            }
        }
    }//GEN-LAST:event_MI_ReporteProveedorActionPerformed

    private void MI_ReporteTasaUSDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ReporteTasaUSDActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();

        //Abrimos la ventana, se guarda la opcion implementada por el usuario
        int seleccion = fc.showSaveDialog(this);

        //si el usuario pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //seleccionamos el fichero
            File fichero = fc.getSelectedFile();
            try {

                Document documento = new Document();

                try {
                    //SE LE COLOCA RUTA AL ARCHIVO + SU NOMBRE.PDF
                    //String ruta =  System.getProperty("user.home");
                    PdfWriter.getInstance(documento, new FileOutputStream(fichero));

                    Paragraph parrafo = new Paragraph();
                    parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                    parrafo.add("TASA USD \n\n");
                    parrafo.setFont(FontFactory.getFont("Arial", 30, Font.BOLD));

                    // SE ABRE EL DOCUMENTO
                    documento.open();
                    documento.add(parrafo);
                    //SE CREA UN OBJETO TABLA DONDE GUARDAR LOS DATOS + TAMA√ëO
                    PdfPTable tabla = new PdfPTable(3);
                    //SE LE COLOCAN TITULO A CADA UNA DE LAS COLUMNAS
                    tabla.addCell("Codigo");
                    tabla.addCell("Semana");
                    tabla.addCell("Monto");

                    try {
                        Object[][] data;
                        data = tUSD.getDatos();
                        int CP = tUSD.obtenerRegistros();

                        for (int i = 0; i < CP; i++) {
                            tabla.addCell(data[i][0].toString());
                            tabla.addCell(data[i][1].toString());
                            tabla.addCell(data[i][2].toString());
                        }

                        documento.add(tabla);
                    } catch (SQLException e) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                    }
                    documento.close();
                    //SE CIERRA EL DOCUMENTO
                    documento.close();
                } catch (Exception e) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);
                }
            } catch (Exception e) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);
            }
        }
    }//GEN-LAST:event_MI_ReporteTasaUSDActionPerformed

    private void MI_ReporteTasaDePreciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ReporteTasaDePreciosActionPerformed
        JFileChooser fc = new JFileChooser();

        //Abrimos la ventana, se guarda la opcion implementada por el usuario
        int seleccion = fc.showSaveDialog(this);

        //si el usuario pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //seleccionamos el fichero
            File fichero = fc.getSelectedFile();
            try {

                Document documento = new Document();

                try {
                    //SE LE COLOCA RUTA AL ARCHIVO + SU NOMBRE.PDF
                    //String ruta =  System.getProperty("user.home");
                    PdfWriter.getInstance(documento, new FileOutputStream(fichero));

                    Paragraph parrafo = new Paragraph();
                    parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                    parrafo.add("TASA DE PRECIO \n\n");
                    parrafo.setFont(FontFactory.getFont("Arial", 30, Font.BOLD));

                    // SE ABRE EL DOCUMENTO
                    documento.open();
                    documento.add(parrafo);
                    //SE CREA UN OBJETO TABLA DONDE GUARDAR LOS DATOS + TAMA√ëO
                    PdfPTable tabla = new PdfPTable(3);
                    //SE LE COLOCAN TITULO A CADA UNA DE LAS COLUMNAS
                    tabla.addCell("En raices de Yuca % Materia Seca");
                    tabla.addCell("En Planta BSF/TM");
                    tabla.addCell("En el Corte BSF/TM");

                    try {
                        Object[][] data;
                        data = tp.getDatos();
                        int CT = tp.cantidad_tasas();

                        for (int i = 0; i < CT; i++) {
                            tabla.addCell(data[i][0].toString());
                            tabla.addCell(data[i][1].toString());
                            tabla.addCell(data[i][2].toString());

                        }

                        documento.add(tabla);
                    } catch (SQLException e) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                    }
                    documento.close();

                    //SE CIERRA EL DOCUMENTO
                    documento.close();
                } catch (Exception e) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                }
            } catch (Exception e) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

            }
        }
    }//GEN-LAST:event_MI_ReporteTasaDePreciosActionPerformed

    private void MI_ReporteTarifasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ReporteTarifasActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();

        //Abrimos la ventana, se guarda la opcion implementada por el usuario
        int seleccion = fc.showSaveDialog(this);

        //si el usuario pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //seleccionamos el fichero
            File fichero = fc.getSelectedFile();
            try {

                Document documento = new Document();

                try {
                    //SE LE COLOCA RUTA AL ARCHIVO + SU NOMBRE.PDF
                    //String ruta =  System.getProperty("user.home");
                    PdfWriter.getInstance(documento, new FileOutputStream(fichero));

                    Paragraph parrafo = new Paragraph();
                    parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                    parrafo.add("TARIFAS \n\n");
                    parrafo.setFont(FontFactory.getFont("Arial", 30, Font.BOLD));
                    documento.setPageSize(PageSize.A4.rotate());

                    // SE ABRE EL DOCUMENTO
                    documento.open();
                    documento.add(parrafo);
                    //SE CREA UN OBJETO TABLA DONDE GUARDAR LOS DATOS + TAMA√ëO
                    PdfPTable tabla = new PdfPTable(7);
                    //SE LE COLOCAN TITULO A CADA UNA DE LAS COLUMNAS
                    tabla.addCell("Codigo Tarifa");
                    tabla.addCell("Cuadrilla");
                    tabla.addCell("Flete");
                    tabla.addCell("Materia Prima");
                    tabla.addCell("Fecha Inicio");
                    tabla.addCell("Fecha Final");
                    tabla.addCell("Estado");

                    try {
                        Object[][] data;
                        data = te.getDatos();
                        int C = te.cantidad_tarifa();

                        for (int i = 0; i < C; i++) {
                            tabla.addCell(data[i][0].toString());
                            tabla.addCell(data[i][1].toString());
                            tabla.addCell(data[i][2].toString());
                            tabla.addCell(data[i][3].toString());
                            tabla.addCell(data[i][4].toString());
                            tabla.addCell(data[i][5].toString());
                            tabla.addCell(data[i][6].toString());
                            ;
                        }
                        documento.add(tabla);
                    } catch (SQLException e) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);
                    }
                    documento.close();
                    //SE CIERRA EL DOCUMENTO
                    documento.close();
                } catch (Exception e) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);
                }
            } catch (Exception e) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

            }
        }
    }//GEN-LAST:event_MI_ReporteTarifasActionPerformed

    private void MI_ReporteTransaccionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ReporteTransaccionesActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();

        //Abrimos la ventana, se guarda la opcion implementada por el usuario
        int seleccion = fc.showSaveDialog(this);

        //si el usuario pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {

            //seleccionamos el fichero
            File fichero = fc.getSelectedFile();
            try {

                Document documento = new Document();

                try {
                    //SE LE COLOCA RUTA AL ARCHIVO + SU NOMBRE.PDF
                    //String ruta =  System.getProperty("user.home");
                    PdfWriter.getInstance(documento, new FileOutputStream(fichero));

                    Paragraph parrafo = new Paragraph();
                    parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                    parrafo.add("TRANSACCIONES \n\n");
                    parrafo.setFont(FontFactory.getFont("Arial", 30, Font.BOLD));
                    documento.setPageSize(PageSize.A4.rotate());

                    // SE ABRE EL DOCUMENTO
                    documento.open();
                    documento.add(parrafo);
                    //SE CREA UN OBJETO TABLA DONDE GUARDAR LOS DATOS + TAMA√ëO
                    PdfPTable tabla = new PdfPTable(9);
                    //SE LE COLOCAN TITULO A CADA UNA DE LAS COLUMNAS
                    tabla.addCell("# Boleto");
                    tabla.addCell("Semana");
                    tabla.addCell("MP");
                    tabla.addCell("Cuadrilla");
                    tabla.addCell("Flete");
                    tabla.addCell("Peaje");
                    tabla.addCell("Estatus");
                    tabla.addCell("Observaciones");
                    tabla.addCell("Cod.proveedor");

                    try {
                        Object[][] data;
                        data = trs.getDatos();
                        int CT = trs.CantidadTrs();

                        for (int i = 0; i < CT; i++) {
                            tabla.addCell(data[i][0].toString());
                            tabla.addCell(data[i][1].toString());
                            tabla.addCell(data[i][2].toString());
                            tabla.addCell(data[i][3].toString());
                            tabla.addCell(data[i][4].toString());
                            tabla.addCell(data[i][5].toString());
                            tabla.addCell(data[i][6].toString());
                            tabla.addCell(data[i][7].toString());
                            tabla.addCell(data[i][8].toString());
                        }

                        documento.add(tabla);
                    } catch (SQLException e) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                    }
                    documento.close();
                    //SE CIERRA EL DOCUMENTO
                    documento.close();
                } catch (Exception e) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                }
            } catch (Exception e) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

            }
        }
    }//GEN-LAST:event_MI_ReporteTransaccionesActionPerformed

    private void MI_ReporteBoletoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ReporteBoletoActionPerformed
        JFileChooser fc = new JFileChooser();
        //Abrimos la ventana, se guarda la opcion implementada por el usuario
        int seleccion = fc.showSaveDialog(this);
        //si el usuario pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            //seleccionamos el fichero
            File fichero = fc.getSelectedFile();
            try {
                Document documento = new Document();
                try {
                    //SE LE COLOCA RUTA AL ARCHIVO + SU NOMBRE.PDF
                    //String ruta =  System.getProperty("user.home");
                    PdfWriter.getInstance(documento, new FileOutputStream(fichero));
                    Paragraph parrafo = new Paragraph();
                    parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                    parrafo.add("BOLETOS \n\n");
                    parrafo.setFont(FontFactory.getFont("Arial", 30, Font.BOLD));
                    documento.setPageSize(PageSize.A4.rotate());
                    // SE ABRE EL DOCUMENTO
                    documento.open();
                    documento.add(parrafo);
                    //SE CREA UN OBJETO TABLA DONDE GUARDAR LOS DATOS + TAMA√ëO
                    PdfPTable tabla = new PdfPTable(10);
                    //SE LE COLOCAN TITULO A CADA UNA DE LAS COLUMNAS
                    tabla.addCell("Num Boleto");
                    tabla.addCell("Nombre");
                    tabla.addCell("Fecha");
                    tabla.addCell("Semana");
                    tabla.addCell("KG Brutos");
                    tabla.addCell("KG Netos");
                    tabla.addCell("Materia S");
                    tabla.addCell("Impurezas");
                    tabla.addCell("Cantidad de Transacciones");
                    tabla.addCell("Observaciones");
                    try {
                        Object[][] data;
                        data = b.getDatos();
                        int C = b.cantida_boletos();
                        for (int i = 0; i < C; i++) {
                            tabla.addCell(data[i][0].toString());
                            tabla.addCell(data[i][1].toString());
                            tabla.addCell(data[i][2].toString());
                            tabla.addCell(data[i][3].toString());
                            tabla.addCell(data[i][4].toString());
                            tabla.addCell(data[i][5].toString());
                            tabla.addCell(data[i][6].toString());
                            tabla.addCell(data[i][7].toString());
                            tabla.addCell(data[i][8].toString());
                            tabla.addCell(data[i][9].toString());
                            ;
                        }
                        documento.add(tabla);
                    } catch (SQLException e) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                    }
                    documento.close();

                    //SE CIERRA EL DOCUMENTO
                    documento.close();
                } catch (Exception e) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                }
            } catch (Exception e) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

            }
        }
    }//GEN-LAST:event_MI_ReporteBoletoActionPerformed

    private void MI_ReporteAnticipoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MI_ReporteAnticipoActionPerformed
        JFileChooser fc = new JFileChooser();
        //Abrimos la ventana, se guarda la opcion implementada por el usuario
        int seleccion = fc.showSaveDialog(this);
        //si el usuario pincha en aceptar
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            //seleccionamos el fichero
            File fichero = fc.getSelectedFile();
            try {
                Document documento = new Document();
                try {
                    //SE LE COLOCA RUTA AL ARCHIVO + SU NOMBRE.PDF
                    //String ruta =  System.getProperty("user.home");
                    PdfWriter.getInstance(documento, new FileOutputStream(fichero));

                    Paragraph parrafo = new Paragraph();
                    parrafo.setAlignment(Paragraph.ALIGN_CENTER);
                    parrafo.add("ANTICIPOS \n\n");
                    parrafo.setFont(FontFactory.getFont("Arial", 30, Font.BOLD));
                    documento.setPageSize(PageSize.A4.rotate());

                    // SE ABRE EL DOCUMENTO
                    documento.open();
                    documento.add(parrafo);
                    //SE CREA UN OBJETO TABLA DONDE GUARDAR LOS DATOS + TAMA√ëO
                    PdfPTable tabla = new PdfPTable(13);
                    //SE LE COLOCAN TITULO A CADA UNA DE LAS COLUMNAS
                    tabla.addCell("Numero");
                    tabla.addCell("Motivo");
                    tabla.addCell("Fecha");
                    tabla.addCell("Semana");
                    tabla.addCell("Monto_BS");
                    tabla.addCell("Monto_DS");
                    tabla.addCell("Aprovado por");
                    tabla.addCell("Observaciones");
                    tabla.addCell("Descontar en ODP");
                    tabla.addCell("Codigo Provedor");
                    tabla.addCell("Codigo Tasa");
                    tabla.addCell("Nombre Proveedor");
                    tabla.addCell("ID Proveedor");

                    try {
                        Object[][] data;
                        data = ant.getDatos();
                        int CA = ant.Cantidad_ANT();

                        for (int i = 0; i < CA; i++) {
                            tabla.addCell(data[i][0].toString());
                            tabla.addCell(data[i][1].toString());
                            tabla.addCell(data[i][2].toString());
                            tabla.addCell(data[i][3].toString());
                            tabla.addCell(data[i][4].toString());
                            tabla.addCell(data[i][5].toString());
                            tabla.addCell(data[i][6].toString());
                            tabla.addCell(data[i][7].toString());
                            tabla.addCell(data[i][8].toString());
                            tabla.addCell(data[i][9].toString());
                            tabla.addCell(data[i][10].toString());
                            tabla.addCell(data[i][11].toString());
                            tabla.addCell(data[i][12].toString());
                        }
                        documento.add(tabla);
                    } catch (SQLException e) {
                        Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                    }
                    documento.close();

                    //SE CIERRA EL DOCUMENTO
                    documento.close();
                } catch (Exception e) {
                    Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

                }
            } catch (Exception e) {
                Logger.getLogger(PantallaPrincipal.class.getName()).log(Level.SEVERE, null, e);

            }
        }
    }//GEN-LAST:event_MI_ReporteAnticipoActionPerformed

    public void cerrar() {
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    confirmarSalida();
                }
            });
            this.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    //CONFIRMAR SALIDA
    public void confirmarSalida() {
        int index = JOptionPane.showConfirmDialog(this, "ESTA SEGURO DE CERRAR LA APLICACION", "ADVERTENCIA", JOptionPane.YES_NO_OPTION);
        if (index == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PantallaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FONDO;
    private javax.swing.JMenuItem MI_Agregar;
    private javax.swing.JMenuItem MI_BuscarModificarT;
    private javax.swing.JMenuItem MI_Cerrar;
    private javax.swing.JMenuItem MI_CerrarTodo;
    private javax.swing.JMenuItem MI_ConsultarModificarTransaccion;
    private javax.swing.JMenuItem MI_CrearA;
    private javax.swing.JMenuItem MI_CrearBoleto;
    private javax.swing.JMenuItem MI_CrearT;
    private javax.swing.JMenuItem MI_CrearTransaccion;
    private javax.swing.JMenuItem MI_GenerarODP;
    private javax.swing.JMenuItem MI_GenerarReporte;
    private javax.swing.JMenuItem MI_Guardar;
    private javax.swing.JMenuItem MI_ManejoAnticipos;
    private javax.swing.JMenuItem MI_ManejoBoletos;
    private javax.swing.JMenuItem MI_MostrarProveedores;
    private javax.swing.JMenuItem MI_ReporteAnticipo;
    private javax.swing.JMenuItem MI_ReporteBoleto;
    private javax.swing.JMenuItem MI_ReporteProveedor;
    private javax.swing.JMenuItem MI_ReporteTarifas;
    private javax.swing.JMenuItem MI_ReporteTasaDePrecios;
    private javax.swing.JMenuItem MI_ReporteTasaUSD;
    private javax.swing.JMenuItem MI_ReporteTransacciones;
    private javax.swing.JMenuItem MI_TasaDePrecios;
    private javax.swing.JMenuItem MI_TasaUSD;
    private javax.swing.JMenu M_Anticipos;
    private javax.swing.JMenu M_Archivo;
    private javax.swing.JMenu M_Boletos;
    private javax.swing.JMenu M_ODP;
    private javax.swing.JMenu M_Proveedor;
    private javax.swing.JMenu M_Reportes;
    private javax.swing.JMenu M_Tarifa_Estandar;
    private javax.swing.JMenu M_Transaccion;
    private javax.swing.JMenu M_Valores;
    private javax.swing.JMenuBar MenuBar;
    // End of variables declaration//GEN-END:variables
}
