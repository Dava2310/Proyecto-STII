/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clases.proveedores;

import java.awt.Color;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import logica.Proveedor_Beneficiario;
import logica.Tarifa_Estandar;
import logica.beneficiarios;
import logica.proveedor;

/**
 *
 * @author DANIEL
 */
public class TablaProveedores extends javax.swing.JFrame {

    public int modo;
    private int registros;
    public boolean tiene_proveedor = false;
    public boolean seleccionado = false;
    public boolean cambiando_beneficiario = false;
    public boolean nuevo_beneficiario = false;
    public proveedor p = new proveedor();
    private beneficiarios b = new beneficiarios();
    public Tarifa_Estandar TE = new Tarifa_Estandar();
    private Proveedor_Beneficiario PB = new Proveedor_Beneficiario();
    private Object[][] dataBeneficiarios;
    private String[] cedulaBeneficiarios;
    Object[][] data;
    private Border borde_rojo = BorderFactory.createLineBorder(Color.RED, 1);
    private Border borde_default;
    int fila = -1;
    private String identificacion;
    private String identificacionBNF;
    public TablaProveedores() {
        initComponents();
        AlertaNumCuenta.setVisible(false);
        borde_default = RazonSocialtxt.getBorder();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        PanelDeIdentificacion = new javax.swing.JPanel();
        CerrarBT = new javax.swing.JButton();
        IdentificacionProveedor = new javax.swing.JLabel();
        FotoIdentificacionv = new javax.swing.JLabel();
        CodigoL = new javax.swing.JLabel();
        Codigotxt = new javax.swing.JTextField();
        IdentificacionL = new javax.swing.JLabel();
        IdentificacionCB = new javax.swing.JComboBox<>();
        Identificaciontxt = new javax.swing.JTextField();
        RazonSocialL = new javax.swing.JLabel();
        RazonSocialtxt = new javax.swing.JTextField();
        DireccionL = new javax.swing.JLabel();
        Direcciontxt = new javax.swing.JTextField();
        TlfL = new javax.swing.JLabel();
        Tlftxt = new javax.swing.JTextField();
        MailL = new javax.swing.JLabel();
        Mailtxt = new javax.swing.JTextField();
        TipoTlftxt = new javax.swing.JTextField();
        MunicipioLB = new javax.swing.JLabel();
        Municipiotxt = new javax.swing.JTextField();
        ActividadL = new javax.swing.JLabel();
        ActividadCB = new javax.swing.JComboBox<>();
        JPanelBancario = new javax.swing.JPanel();
        IDAUT_txt = new javax.swing.JTextField();
        IDAUT_CB = new javax.swing.JComboBox<>();
        IDAutL6 = new javax.swing.JLabel();
        NameAutL6 = new javax.swing.JLabel();
        NombreAUT_txt = new javax.swing.JTextField();
        TCuenta_CB = new javax.swing.JComboBox<>();
        TCuentaL6 = new javax.swing.JLabel();
        BancoL6 = new javax.swing.JLabel();
        Banco_CB = new javax.swing.JComboBox<>();
        MOD_CB = new javax.swing.JComboBox<>();
        NumCuentaL6 = new javax.swing.JLabel();
        NumCuenta_txt = new javax.swing.JTextField();
        CorreoBNF_txt = new javax.swing.JTextField();
        MailBnfL6 = new javax.swing.JLabel();
        NombreBNF_txt = new javax.swing.JTextField();
        IDBNF_txt = new javax.swing.JTextField();
        NameBnfL6 = new javax.swing.JLabel();
        IDL6 = new javax.swing.JLabel();
        IDBNF_CB = new javax.swing.JComboBox<>();
        LogoInformacionBancaria6 = new javax.swing.JLabel();
        InformacionBancariaL6 = new javax.swing.JLabel();
        MODL6 = new javax.swing.JLabel();
        InformacionBancaria_BT = new javax.swing.JToggleButton();
        NuevoBeneficiario_BT = new javax.swing.JToggleButton();
        ListarBeneficiariosBT = new javax.swing.JComboBox<>();
        AlertaNumCuenta = new javax.swing.JLabel();
        JPanelPagos = new javax.swing.JPanel();
        MP_AcordadoLB = new javax.swing.JLabel();
        MP_Acordadotxt = new javax.swing.JTextField();
        Cuadrillatxt = new javax.swing.JTextField();
        CuadrillaLB = new javax.swing.JLabel();
        MPCB = new javax.swing.JComboBox<>();
        MPLB = new javax.swing.JLabel();
        FleteLB = new javax.swing.JLabel();
        Fletetxt = new javax.swing.JTextField();
        IdentificacionProveedor4 = new javax.swing.JLabel();
        Peajetxt = new javax.swing.JTextField();
        TarifaEstandarBT = new javax.swing.JToggleButton();
        IdentificacionProveedor1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        GuardarBT = new javax.swing.JButton();
        HabilitarCambiosBT = new javax.swing.JToggleButton();
        ActivarBT = new javax.swing.JButton();
        DesactivarBT = new javax.swing.JButton();
        SeleccionarBT = new javax.swing.JToggleButton();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Identificacion", "Razon Social", "Direccion", "Municipio", "Telefono", "Email", "Nombre de Beneficiario", "Cedula Beneficiario", "Correo Beneficiario", "Entidad Bancaria", "Numero de Cuenta", "Tipo de cuenta", "Modo de cuenta", "Moneda", "Nombre autorizado", "Cedula autorizado", "Estado Proveedor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabla.getTableHeader().setReorderingAllowed(false);
        tabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabla);

        jScrollPane1.setBackground(new java.awt.Color(205, 240, 243));

        CerrarBT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CerrarBT.setText("CERRAR");
        CerrarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CerrarBTActionPerformed(evt);
            }
        });

        IdentificacionProveedor.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IdentificacionProveedor.setText("Identificación del Proveedor");

        FotoIdentificacionv.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Imagen1.png"))); // NOI18N

        CodigoL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CodigoL.setText("Código (*)");

        Codigotxt.setEditable(false);
        Codigotxt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        IdentificacionL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IdentificacionL.setText("Identificación (*)");

        IdentificacionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "V", "E", "J", "P", "G" }));
        IdentificacionCB.setEnabled(false);

        Identificaciontxt.setEditable(false);
        Identificaciontxt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        RazonSocialL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        RazonSocialL.setText("Razón Social (*)");

        RazonSocialtxt.setEditable(false);
        RazonSocialtxt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        DireccionL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        DireccionL.setText("Dirección");

        Direcciontxt.setEditable(false);
        Direcciontxt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        TlfL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TlfL.setText("Teléfono");

        Tlftxt.setEditable(false);
        Tlftxt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        MailL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MailL.setText("E-mail");

        Mailtxt.setEditable(false);
        Mailtxt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        TipoTlftxt.setEditable(false);
        TipoTlftxt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        MunicipioLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MunicipioLB.setText("Municipio");

        Municipiotxt.setEditable(false);

        ActividadL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ActividadL.setText("Estado de actividad");

        ActividadCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activo", "Inactivo" }));
        ActividadCB.setEnabled(false);

        IDAUT_txt.setEditable(false);
        IDAUT_txt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        IDAUT_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "V", "E", "J", "P", "G" }));
        IDAUT_CB.setEnabled(false);

        IDAutL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IDAutL6.setText("Identificación del Autorizado (*)");

        NameAutL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        NameAutL6.setText("Nombre del Autorizado (*)");

        NombreAUT_txt.setEditable(false);
        NombreAUT_txt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        TCuenta_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cuenta Ahorros", "Cuenta Corriente", "Cuenta Maxima", "Cuenta Moneda Extranjera" }));
        TCuenta_CB.setEnabled(false);

        TCuentaL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TCuentaL6.setText("Tipo de cuenta (*)");

        BancoL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        BancoL6.setText("Banco (*)");

        Banco_CB.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
        Banco_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MERCANTIL BANCO UNIVERSAL", "BANCO DE VENEZUELA S.A BANCO UNIVERSAL", "VENEZOLANO DE CREDITO S.A BANCO UNIVERSAL", "BANCO PROVINCIAL S.A BANCO UNIVERSAL", "BANCO DEL CARIBE S.A C.A", "BANCO EXTERIOR S.A", "BANCO OCCIDENTAL DE DESCUENTO S.A C.A", "BANCO CARONI C.A BANCO UNIVERSAL", "BANESCO BANCO UNIVERSAL", "BANCO SOFITASA", "BANCO PLAZA", "BANCO DE COMERCIO EXTERIOR", "FONDO COMUN C.A BANCO UNIVERSAL", "100% BANCO, BANCO UNIVERSAL C.A", "DEL SUR BANCO UNIVERSAL, C.A", "BANCO DEL TESORO ", "BANCO AGRICOLA DE VENEZUELA C.A", "BANCRECER S.A BANCO MICROFINANCIERO", "MIBANCO BANCO DE DESARROLLO", "BANCO ACTIVO C.A", "BANCA AMIGA BANCO MICROFINANCIERO", "BANCO BICENTENARIO BANCO UNIVERSAL C.A", "BANCO DE LA FUERZA ARMADA NACIONAL BOLIVARIANA", "BANCO NACIONAL DE CREDITO " }));
        Banco_CB.setEnabled(false);

        MOD_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cuenta Propia", "Cuenta Nueva", "Cuenta Autorizada" }));
        MOD_CB.setEnabled(false);
        MOD_CB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MOD_CBActionPerformed(evt);
            }
        });

        NumCuentaL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        NumCuentaL6.setText("Nº de Cuenta (*)");

        NumCuenta_txt.setEditable(false);
        NumCuenta_txt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        CorreoBNF_txt.setEditable(false);
        CorreoBNF_txt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        MailBnfL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MailBnfL6.setText("E-mail del beneficiario");

        NombreBNF_txt.setEditable(false);
        NombreBNF_txt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        IDBNF_txt.setEditable(false);
        IDBNF_txt.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N

        NameBnfL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        NameBnfL6.setText("Nombre del beneficiario (*)");

        IDL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IDL6.setText("Identificación (*)");

        IDBNF_CB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "V", "E", "P", "J", "G" }));
        IDBNF_CB.setEnabled(false);

        LogoInformacionBancaria6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Imagen2.jpg"))); // NOI18N

        InformacionBancariaL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        InformacionBancariaL6.setText("Información Bancaria");

        MODL6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MODL6.setText("MOD (*)");

        InformacionBancaria_BT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        InformacionBancaria_BT.setText("CAMBIAR LA INFORMACION DE BENEFICIARIO");
        InformacionBancaria_BT.setEnabled(false);
        InformacionBancaria_BT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InformacionBancaria_BTActionPerformed(evt);
            }
        });

        NuevoBeneficiario_BT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        NuevoBeneficiario_BT.setText("COLOCAR UN NUEVO BENEFICIARIO");
        NuevoBeneficiario_BT.setEnabled(false);
        NuevoBeneficiario_BT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoBeneficiario_BTActionPerformed(evt);
            }
        });

        ListarBeneficiariosBT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nuevo" }));
        ListarBeneficiariosBT.setEnabled(false);
        ListarBeneficiariosBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ListarBeneficiariosBTActionPerformed(evt);
            }
        });

        AlertaNumCuenta.setForeground(new java.awt.Color(255, 0, 0));
        AlertaNumCuenta.setText("Deben ser 20 carácteres numericos obligatoriamente.");

        javax.swing.GroupLayout JPanelBancarioLayout = new javax.swing.GroupLayout(JPanelBancario);
        JPanelBancario.setLayout(JPanelBancarioLayout);
        JPanelBancarioLayout.setHorizontalGroup(
            JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelBancarioLayout.createSequentialGroup()
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPanelBancarioLayout.createSequentialGroup()
                        .addGap(158, 158, 158)
                        .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(JPanelBancarioLayout.createSequentialGroup()
                                    .addComponent(NameAutL6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(NombreAUT_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(JPanelBancarioLayout.createSequentialGroup()
                                    .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(JPanelBancarioLayout.createSequentialGroup()
                                            .addComponent(BancoL6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(Banco_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(13, 13, 13)
                                            .addComponent(NumCuentaL6))
                                        .addGroup(JPanelBancarioLayout.createSequentialGroup()
                                            .addComponent(IDL6)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(IDBNF_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(IDBNF_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(MailBnfL6)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(NumCuenta_txt, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE)
                                        .addComponent(CorreoBNF_txt)))
                                .addGroup(JPanelBancarioLayout.createSequentialGroup()
                                    .addComponent(IDAutL6)
                                    .addGap(18, 18, 18)
                                    .addComponent(IDAUT_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(IDAUT_txt, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(JPanelBancarioLayout.createSequentialGroup()
                                    .addComponent(NameBnfL6)
                                    .addGap(18, 18, 18)
                                    .addComponent(NombreBNF_txt)))
                            .addGroup(JPanelBancarioLayout.createSequentialGroup()
                                .addComponent(TCuentaL6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TCuenta_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MODL6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MOD_CB, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(AlertaNumCuenta, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(JPanelBancarioLayout.createSequentialGroup()
                        .addGap(177, 177, 177)
                        .addComponent(InformacionBancaria_BT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ListarBeneficiariosBT, javax.swing.GroupLayout.PREFERRED_SIZE, 397, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JPanelBancarioLayout.createSequentialGroup()
                .addGap(591, 591, 591)
                .addComponent(NuevoBeneficiario_BT)
                .addGap(84, 84, 84))
            .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPanelBancarioLayout.createSequentialGroup()
                    .addGap(5, 5, 5)
                    .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(LogoInformacionBancaria6, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(InformacionBancariaL6))
                    .addContainerGap(803, Short.MAX_VALUE)))
        );
        JPanelBancarioLayout.setVerticalGroup(
            JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelBancarioLayout.createSequentialGroup()
                .addComponent(NuevoBeneficiario_BT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InformacionBancaria_BT)
                    .addComponent(ListarBeneficiariosBT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NombreBNF_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NameBnfL6))
                .addGap(8, 8, 8)
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CorreoBNF_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MailBnfL6)
                    .addComponent(IDBNF_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDL6)
                    .addComponent(IDBNF_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumCuenta_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(NumCuentaL6)
                    .addComponent(BancoL6)
                    .addComponent(Banco_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelBancarioLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TCuentaL6)
                            .addComponent(TCuenta_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MODL6)
                            .addComponent(MOD_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(JPanelBancarioLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(AlertaNumCuenta)))
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPanelBancarioLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(NameAutL6))
                    .addGroup(JPanelBancarioLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(NombreAUT_txt, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDAUT_txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDAUT_CB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IDAutL6))
                .addContainerGap())
            .addGroup(JPanelBancarioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(JPanelBancarioLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(InformacionBancariaL6)
                    .addGap(7, 7, 7)
                    .addComponent(LogoInformacionBancaria6)
                    .addContainerGap(61, Short.MAX_VALUE)))
        );

        MP_AcordadoLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MP_AcordadoLB.setText("MP (Monto acordado):");

        MP_Acordadotxt.setEditable(false);

        Cuadrillatxt.setEditable(false);

        CuadrillaLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        CuadrillaLB.setText("Cuadrilla (*)");

        MPCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TABLA", "ACORDADO" }));
        MPCB.setEnabled(false);
        MPCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MPCBActionPerformed(evt);
            }
        });

        MPLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        MPLB.setText("MP");

        FleteLB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        FleteLB.setText("Flete (*)");

        Fletetxt.setEditable(false);

        IdentificacionProveedor4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IdentificacionProveedor4.setText("Peaje (*)");

        Peajetxt.setEditable(false);

        TarifaEstandarBT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        TarifaEstandarBT.setText("TARIFA ESTANDAR");
        TarifaEstandarBT.setEnabled(false);
        TarifaEstandarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TarifaEstandarBTActionPerformed(evt);
            }
        });

        IdentificacionProveedor1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        IdentificacionProveedor1.setText("Tasas de pago");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salario2.png"))); // NOI18N

        javax.swing.GroupLayout JPanelPagosLayout = new javax.swing.GroupLayout(JPanelPagos);
        JPanelPagos.setLayout(JPanelPagosLayout);
        JPanelPagosLayout.setHorizontalGroup(
            JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPagosLayout.createSequentialGroup()
                .addGroup(JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelPagosLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(jLabel2))
                    .addGroup(JPanelPagosLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(IdentificacionProveedor1)))
                .addGap(40, 40, 40)
                .addGroup(JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(JPanelPagosLayout.createSequentialGroup()
                        .addComponent(MPLB)
                        .addGap(18, 18, 18)
                        .addComponent(MPCB, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(CuadrillaLB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Cuadrillatxt, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FleteLB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Fletetxt))
                    .addGroup(JPanelPagosLayout.createSequentialGroup()
                        .addComponent(MP_AcordadoLB)
                        .addGap(18, 18, 18)
                        .addComponent(MP_Acordadotxt, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(IdentificacionProveedor4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Peajetxt, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47)
                .addComponent(TarifaEstandarBT)
                .addGap(44, 44, 44))
        );
        JPanelPagosLayout.setVerticalGroup(
            JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(JPanelPagosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(IdentificacionProveedor1)
                    .addGroup(JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Cuadrillatxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CuadrillaLB)
                        .addComponent(FleteLB)
                        .addComponent(MPLB)
                        .addComponent(MPCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Fletetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(JPanelPagosLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(JPanelPagosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(MP_AcordadoLB)
                            .addComponent(MP_Acordadotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Peajetxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IdentificacionProveedor4)))
                    .addGroup(JPanelPagosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2))
                    .addGroup(JPanelPagosLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(TarifaEstandarBT)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        GuardarBT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        GuardarBT.setText("GUARDAR CAMBIOS");
        GuardarBT.setEnabled(false);
        GuardarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarBTActionPerformed(evt);
            }
        });

        HabilitarCambiosBT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        HabilitarCambiosBT.setText("HABILITAR CAMBIOS");
        HabilitarCambiosBT.setEnabled(false);
        HabilitarCambiosBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HabilitarCambiosBTActionPerformed(evt);
            }
        });

        ActivarBT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        ActivarBT.setText("RE-ACTIVAR");
        ActivarBT.setEnabled(false);
        ActivarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActivarBTActionPerformed(evt);
            }
        });

        DesactivarBT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        DesactivarBT.setText("DESACTIVAR");
        DesactivarBT.setEnabled(false);
        DesactivarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DesactivarBTActionPerformed(evt);
            }
        });

        SeleccionarBT.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        SeleccionarBT.setText("SELECCIONAR");
        SeleccionarBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeleccionarBTActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelDeIdentificacionLayout = new javax.swing.GroupLayout(PanelDeIdentificacion);
        PanelDeIdentificacion.setLayout(PanelDeIdentificacionLayout);
        PanelDeIdentificacionLayout.setHorizontalGroup(
            PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                        .addComponent(FotoIdentificacionv, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                                .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RazonSocialL)
                                    .addComponent(DireccionL))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                                        .addComponent(Direcciontxt, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(MunicipioLB)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(Municipiotxt, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(RazonSocialtxt)))
                            .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                                .addComponent(TlfL)
                                .addGap(18, 18, 18)
                                .addComponent(TipoTlftxt, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Tlftxt, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(MailL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Mailtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                                .addComponent(CodigoL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Codigotxt, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(IdentificacionL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(IdentificacionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Identificaciontxt, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                                .addComponent(ActividadL)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ActividadCB, javax.swing.GroupLayout.PREFERRED_SIZE, 488, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(IdentificacionProveedor))
                .addGap(48, 48, 48))
            .addComponent(JPanelBancario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(JPanelPagos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelDeIdentificacionLayout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addComponent(DesactivarBT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ActivarBT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(GuardarBT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(HabilitarCambiosBT)
                .addGap(12, 12, 12)
                .addComponent(SeleccionarBT)
                .addGap(18, 18, 18)
                .addComponent(CerrarBT)
                .addContainerGap())
        );
        PanelDeIdentificacionLayout.setVerticalGroup(
            PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(IdentificacionProveedor)
                .addGap(25, 25, 25)
                .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelDeIdentificacionLayout.createSequentialGroup()
                        .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CodigoL)
                            .addComponent(Codigotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IdentificacionL)
                            .addComponent(IdentificacionCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Identificaciontxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(RazonSocialL)
                            .addComponent(RazonSocialtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(DireccionL)
                            .addComponent(Direcciontxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MunicipioLB)
                            .addComponent(Municipiotxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TlfL)
                            .addComponent(Tlftxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MailL)
                            .addComponent(Mailtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TipoTlftxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ActividadL)
                            .addComponent(ActividadCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(FotoIdentificacionv))
                .addGap(18, 18, 18)
                .addComponent(JPanelBancario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(JPanelPagos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelDeIdentificacionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CerrarBT)
                    .addComponent(GuardarBT)
                    .addComponent(HabilitarCambiosBT)
                    .addComponent(ActivarBT)
                    .addComponent(DesactivarBT)
                    .addComponent(SeleccionarBT))
                .addContainerGap())
        );

        jScrollPane1.setViewportView(PanelDeIdentificacion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 373, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        mostrarTodos(); 
        cargarDatosBeneficiarios();
    }//GEN-LAST:event_formWindowOpened
    
    //ESTA ES LA FUNCION QUE PERMITE COLOCAR EN PANTALLA LOS DATOS DEL PROVEEDOR, BENEFICIARIO Y SU TARIFA
    private void tablaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMouseClicked
        fila = tabla.rowAtPoint(evt.getPoint());
        if(fila > -1 && seleccionado == false){
            Codigotxt.setText(String.valueOf(tabla.getValueAt(fila, 0)));
            String identificacion = String.valueOf(tabla.getValueAt(fila, 1));
            char tipoIdentificacion = identificacion.charAt(0);
            int TipoID1 = p.indexIdentificacion(tipoIdentificacion);
            IdentificacionCB.setSelectedIndex(TipoID1);
            Identificaciontxt.setText(identificacion.substring(1, identificacion.length()));
            RazonSocialtxt.setText(String.valueOf(tabla.getValueAt(fila,2)));
            
            String direccion = String.valueOf(tabla.getValueAt(fila,3));
            if(!direccion.equals("null")){
                Direcciontxt.setText(direccion);
            } else {
                Direcciontxt.setText("");
            }
            
            String municipio = String.valueOf(tabla.getValueAt(fila,4));
            if(!municipio.equals("null")){
                Municipiotxt.setText(municipio);
            } else {
                Municipiotxt.setText("");
            }
            
            
            String telefono = String.valueOf(tabla.getValueAt(fila,5));
            if(!telefono.equals("null") && !telefono.isEmpty()){
                TipoTlftxt.setText(telefono.substring(0, 4));
                Tlftxt.setText(telefono.substring(4, telefono.length()));
            } else {
                TipoTlftxt.setText("");
                Tlftxt.setText("");
            }
            
            String correo = String.valueOf(tabla.getValueAt(fila,6));
            if(!correo.equals("null")){
                Mailtxt.setText(correo);
            } else {
                Mailtxt.setText("");
            }
            
            //MONTOS DE PAGO
            Cuadrillatxt.setText(String.valueOf(tabla.getValueAt(fila,7)));
            Fletetxt.setText(String.valueOf(tabla.getValueAt(fila,8)));
            Peajetxt.setText(String.valueOf(tabla.getValueAt(fila,9)));
            String MateriaPrima = String.valueOf(tabla.getValueAt(fila,10));
            
            if(MateriaPrima.equals("TABLA")){
                MPCB.setSelectedIndex(0);
            } else {
                MPCB.setSelectedIndex(1);
            }
            
            String MP_acordado = String.valueOf(tabla.getValueAt(fila,11));
            if(!MP_acordado.equals("null")){
                MP_Acordadotxt.setText(MP_acordado);
            } else {
                MP_Acordadotxt.setText("");
            }
            
            String cod_tarifa = String.valueOf(tabla.getValueAt(fila, 12));
            if(!cod_tarifa.equals("0")){
                TarifaEstandarBT.setSelected(true);
            } else {
                TarifaEstandarBT.setSelected(false);
            }
            
            imprimirDatosBeneficiario();

            String actividad = String.valueOf(tabla.getValueAt(fila,22));
            if(actividad.equals("Activo")){
                ActividadCB.setSelectedIndex(0);
            } else{
                ActividadCB.setSelectedIndex(1);
            }
            
        }
    }//GEN-LAST:event_tablaMouseClicked
    
    private void imprimirDatosBeneficiario(){
        String Name_Bnf = String.valueOf(tabla.getValueAt(fila,13));
            String identificacion2 = String.valueOf(tabla.getValueAt(fila,14));
            String num_cuenta = String.valueOf(tabla.getValueAt(fila,17));
            
            if(!Name_Bnf.equals("null") && !identificacion2.equals("null") && !num_cuenta.equals("null")){
                tiene_proveedor = true;
                NombreBNF_txt.setText(String.valueOf(tabla.getValueAt(fila,13)));
                char tipoIdentificacion2 = identificacion2.charAt(0);
                int TIPOID2 = p.indexIdentificacion(tipoIdentificacion2);
                IDBNF_CB.setSelectedIndex(TIPOID2);
                IDBNF_txt.setText(identificacion2.substring(1, identificacion2.length()));
                String correo_bnf = String.valueOf(tabla.getValueAt(fila,15));
                if(!correo_bnf.equals("null")){
                    CorreoBNF_txt.setText(correo_bnf);
                } else {
                    CorreoBNF_txt.setText("");
                }
                String entidad_bancaria = String.valueOf(tabla.getValueAt(fila,16));
                int index_banco = p.getindexBanco(entidad_bancaria);
                Banco_CB.setSelectedIndex(index_banco);
                NumCuenta_txt.setText(String.valueOf(tabla.getValueAt(fila,17)));
                String TipoCuenta = String.valueOf(tabla.getValueAt(fila, 18));
                int index_tipo_cuenta = p.indexTipoCuenta(TipoCuenta);
                TCuenta_CB.setSelectedIndex(index_tipo_cuenta);
                String modo_cuenta = String.valueOf(tabla.getValueAt(fila,19));
                int index_mod = p.indexmod_Cuenta(modo_cuenta);
                MOD_CB.setSelectedIndex(index_mod);
                if(!String.valueOf(tabla.getValueAt(fila,20)).equals("null")){
                    NombreAUT_txt.setText(String.valueOf(tabla.getValueAt(fila,20)));
                } else {
                    NombreAUT_txt.setText("");
                }
                if(!String.valueOf(tabla.getValueAt(fila,21)).equals("null") && !String.valueOf(tabla.getValueAt(fila,21)).isEmpty()){
                    String ID_Aut = String.valueOf(tabla.getValueAt(fila,21));
                    char tipoIdentificacion3 = ID_Aut.charAt(0);
                    int TipoID3 = p.indexIdentificacion(tipoIdentificacion3);
                    IDAUT_CB.setSelectedIndex(TipoID3);
                    IDAUT_txt.setText(ID_Aut.substring(1, ID_Aut.length()));
                } else {
                    IDAUT_txt.setText("");
                    IDAUT_CB.setSelectedIndex(0);
                }
                NombreAUT_txt.setEditable(false);
                IDAUT_txt.setEditable(false);
                IDAUT_CB.setEnabled(false);
                
                for(int i = 0; i < registros; i++){
                    if(identificacion2.equals(cedulaBeneficiarios[i])){
                        ListarBeneficiariosBT.setSelectedIndex(i + 1);
                    }
                }
            } else {
                limpiarDatosBeneficiario();
            }
    }
    
    private void MPCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MPCBActionPerformed
        if(MPCB.getSelectedItem().toString().equals("ACORDADO")){
            MP_Acordadotxt.setEditable(true);
        } else {
            MP_Acordadotxt.setEditable(false);
        }
    }//GEN-LAST:event_MPCBActionPerformed

    private void TarifaEstandarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TarifaEstandarBTActionPerformed
        if(TarifaEstandarBT.isSelected()){
            //PARA ESTE CASO, COMO LA SELECCIONAN, PODEMOS ACTUALIZAR ESOS CAMPOS DE LA TARIFA
            Object[] data = TE.obtenerUltimaTarifa();
            MPCB.setSelectedIndex(0); MPCB.setEnabled(false);
            Cuadrillatxt.setText(data[1].toString()); Cuadrillatxt.setEditable(false);
            Fletetxt.setText(data[2].toString()); Fletetxt.setEditable(false);
        } else {
            MPCB.setEnabled(true);
            Cuadrillatxt.setEditable(true);
            Fletetxt.setEditable(true);
        }
    }//GEN-LAST:event_TarifaEstandarBTActionPerformed

    private void MOD_CBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MOD_CBActionPerformed
        String texto = MOD_CB.getSelectedItem().toString();
        if(texto.equals("Cuenta Autorizada")){
            NombreAUT_txt.setEditable(true);
            IDAUT_txt.setEditable(true);
            IDAUT_CB.setEnabled(true);
        } else {
            NombreAUT_txt.setEditable(false);
            IDAUT_txt.setEditable(false);
            IDAUT_CB.setEnabled(false);
        }
    }//GEN-LAST:event_MOD_CBActionPerformed

    private boolean verificacionCorreo(String email){
        boolean condicion = false;
        boolean arroba = false;
        boolean punto = false;
        for(int i = 0; i < email.length(); i++){
            char caracter = email.charAt(i);
            if(!arroba){
                if(caracter == '@'){
                    arroba = true;
                    continue;
                }
            }
            if(arroba && !punto){
                if(caracter == '.'){
                    punto = true;
                    break;
                }
            }
        }
        if(arroba && punto){
            condicion = true;
        }
        return condicion;
    }
    
    private boolean verificacionCompleta(){
        boolean condicion = true;
        boolean tipoTlf = false;
        String texto;
        /*
            SE PROCEDERÁ A VERIFICAR TODOS LOS CAMPOS POSIBLES
            0- Que la identificacion de proveedor nueva no se encuentre en el sistema.
            1- Razon Social no este vacia
            2- Que ambos textos del telefono sean unicamente digitos numéricos
            3- Que el email tenga un @ y un .
            4- Verificacion de los campos de pagos sean flotantes.
            5- Si está activada la información bancaria:
                5.1- Verificar Nombre no vacio
                5.2- Identificacion no vacia y meramente numerica
                5.3- Si el correo no esta vacio, que sea valido
                5.4- Que el numero de cuenta sea meramente numerico y obligatoriamente 20 digitos
                5.5- Si esta en modo autorizado:
                    5.5.1- Que el nombre no este vacio
                    5.5.2- Que la identificacion sea valida
        */
        //0- IDENTIFICACION DE PROVEEDOR
        texto = IdentificacionCB.getSelectedItem().toString() + Identificaciontxt.getText();
        if(!texto.equals(this.identificacion)){
            //SI LA IDENTIFICACION NO SE PARECE A LA QUE SE HA VENIDO CAMBIANDO
            //QUIERE DECIR QUE LA CAMBIO
            if(Identificaciontxt.getText().isEmpty()){
                Identificaciontxt.setBorder(borde_rojo);
                condicion = false;
            } else {
                /*
                    SI NO ESTÁ VACÍA, HAY QUE HACER LAS MISMAS COMPROBACIONES PRIMERO DE QUE SEA VALIDA
                    DESPUÉS COMRPROBRAMOS SI ES VALIDA QUE NO SE ENCUENTRE EN EL SISTEM
                */
                if((Identificaciontxt.getText().length() < 7)){
                   Identificaciontxt.setBorder(borde_rojo);
                   condicion = false;
                } else if(!(Identificaciontxt.getText().length() < 7)){
                    if(!p.comprobacionIdentificacion(Identificaciontxt.getText())){
                        Identificaciontxt.setBorder(borde_rojo);
                        condicion = false;
                    } else if(p.comprobacionIdentificacion(Identificaciontxt.getText())){
                        try {
                            /*
                            AQUI YA TENEMOS UNA IDENTIFICACION VALIDA
                            NOS QUEDARA SABER SI ESTA EN EL SISTEMA
                            */
                            if(p.buscarIdentificacion2(texto)){
                                JOptionPane.showMessageDialog(null, "LA CEDULA NUEVA QUE ESTA MODIFICANDO SE ENCUENTRA YA EN EL SISTEMA", "ERROR", JOptionPane.ERROR_MESSAGE);
                                Identificaciontxt.setBorder(borde_rojo);
                                condicion = false;
                            } else if(!p.buscarIdentificacion2(texto)){
                                Identificaciontxt.setBorder(borde_default);
                            }
                        } catch (SQLException ex) {
                            Logger.getLogger(TablaProveedores.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }
        }
        //1- RAZON SOCIAL
        if(RazonSocialtxt.getText().isEmpty()){
            condicion = false;
            RazonSocialtxt.setBorder(borde_rojo);
        } else {
            RazonSocialtxt.setBorder(borde_default);
        }
        //2.1- PRIMEROS 4 DIGITOS DEL TELEFONO
        if(!TipoTlftxt.getText().isEmpty() && !p.comprobacionIdentificacion(TipoTlftxt.getText())){
            TipoTlftxt.setBorder(borde_rojo);
            condicion = false;
        } else if(!TipoTlftxt.getText().isEmpty() && p.comprobacionIdentificacion(TipoTlftxt.getText())){
            if(TipoTlftxt.getText().length() != 4){
                TipoTlftxt.setBorder(borde_rojo);
                condicion = false;
            } else {
                TipoTlftxt.setBorder(borde_default);
                tipoTlf = true;
            }
        }
        //2.2- ULTIMOS 7 DIGITOS DEL TELEFONO
        if(!Tlftxt.getText().isEmpty() && !p.comprobacionIdentificacion(Tlftxt.getText()) && tipoTlf){
            Tlftxt.setBorder(borde_rojo);
            condicion = false;
        } else if(!Tlftxt.getText().isEmpty() && p.comprobacionIdentificacion(Tlftxt.getText()) && tipoTlf){
            if(Tlftxt.getText().length() != 7){
                Tlftxt.setBorder(borde_rojo);
                condicion = false;
            } else {
                Tlftxt.setBorder(borde_default);
            }
        } else if(Tlftxt.getText().isEmpty()){
            Tlftxt.setBorder(borde_rojo);
            condicion = false;
        }
        //3- COMPROBACION DE CORREO
        if(!Mailtxt.getText().isEmpty() && !verificacionCorreo(Mailtxt.getText())){
            Mailtxt.setBorder(borde_rojo);
            condicion = false;
        } else if(!Mailtxt.getText().isEmpty() && verificacionCorreo(Mailtxt.getText())){
            Mailtxt.setBorder(borde_default);
        }
        //4.1- COMPROBACION DE MATERIA PRIMA ACORDADA
        if(MPCB.getSelectedIndex() != 0){
            if(MP_Acordadotxt.getText().isEmpty()){
                MP_Acordadotxt.setBorder(borde_rojo);
                condicion = false;
            } else if(!MP_Acordadotxt.getText().isEmpty()){    
                if(!p.comprobacionFlotante(MP_Acordadotxt.getText())){
                    condicion = false;
                    MP_Acordadotxt.setBorder(borde_rojo);
                } else {
                    MP_Acordadotxt.setBorder(borde_default);
                }
            }
        } else {
            MP_Acordadotxt.setBorder(borde_default);
        }
        //4.2- COMPROBACION DE CUADRILLA
        if(Cuadrillatxt.getText().isEmpty()){
            Cuadrillatxt.setBorder(borde_rojo);
            condicion = false;
        } else if(!Cuadrillatxt.getText().isEmpty()){
            if(!p.comprobacionFlotante(Cuadrillatxt.getText())){
                condicion = false;
                Cuadrillatxt.setBorder(borde_rojo);
            } else {
                Cuadrillatxt.setBorder(borde_default);
            }
        }
        //4.3- COMPROBACION DE FLETE
        if(Fletetxt.getText().isEmpty()){
            Fletetxt.setBorder(borde_rojo);
            condicion = false;
        } else if(!Fletetxt.getText().isEmpty()){
            if(!p.comprobacionFlotante(Fletetxt.getText())){
                condicion = false;
                Fletetxt.setBorder(borde_rojo);
            } else {
                Fletetxt.setBorder(borde_default);
            }
        }
        //4.4- COMPROBACION DE PEAJE
        if(Peajetxt.getText().isEmpty()){
            Peajetxt.setBorder(borde_rojo);
            condicion = false;
        } else if(!Peajetxt.getText().isEmpty()){
            if(!p.comprobacionEntero(Peajetxt.getText())){
                condicion = false;
                Peajetxt.setBorder(borde_rojo);
            } else{
                Peajetxt.setBorder(borde_default);
            }
        }
        //COMPROBACION BANCARIA
        if(NuevoBeneficiario_BT.isSelected() || InformacionBancaria_BT.isSelected()){
            //5.1- Nombre no vacio
            if(NombreBNF_txt.getText().isEmpty()){
                NombreBNF_txt.setBorder(borde_rojo);
                condicion = false;
            } else {
                NombreBNF_txt.setBorder(borde_default);
            }
            //5.2- Identificacion no vacia y meramente numerica 
            if(IDBNF_txt.getText().isEmpty()){
                IDBNF_txt.setBorder(borde_rojo);
                condicion = false;
            } else if(!IDBNF_txt.getText().isEmpty() && (IDBNF_txt.getText().length() < 7)){
                IDBNF_txt.setBorder(borde_rojo);
                condicion = false;
            } else if(!IDBNF_txt.getText().isEmpty() && !(IDBNF_txt.getText().length() < 7)){
                if(!p.comprobacionIdentificacion(IDBNF_txt.getText())){
                    IDBNF_txt.setBorder(borde_rojo);
                    condicion = false;
                } else if(p.comprobacionIdentificacion(IDBNF_txt.getText())){
                    texto = IDBNF_CB.getSelectedItem().toString() + IDBNF_txt.getText();
                    if(!b.buscarBeneficiario(texto)){
                        IDBNF_txt.setBorder(borde_default);
                    } else {
                       JOptionPane.showMessageDialog(null, "LA CEDULA NUEVA QUE ESTA MODIFICANDO SE ENCUENTRA YA EN EL SISTEMA", "ERROR", JOptionPane.ERROR_MESSAGE);
                       condicion = false;
                       IDBNF_txt.setBorder(borde_rojo);
                    }
                }
            }
            //5.3- Si el correo no esta vacio, que sea valido
            if(!CorreoBNF_txt.getText().isEmpty() && !verificacionCorreo(CorreoBNF_txt.getText())){
                CorreoBNF_txt.setBorder(borde_rojo);
                condicion = false;
            } else if(!CorreoBNF_txt.getText().isEmpty() && verificacionCorreo(CorreoBNF_txt.getText())){
                CorreoBNF_txt.setBorder(borde_default);
            }
            //5.4- Numero de cuenta no vacio, numerico y 20 digitos
            if(NumCuenta_txt.getText().isEmpty()){
                NumCuenta_txt.setBorder(borde_rojo);
                condicion = false;
            } else if(!NumCuenta_txt.getText().isEmpty()){
                if(NumCuenta_txt.getText().length() != 20){
                    NumCuenta_txt.setBorder(borde_rojo);
                    AlertaNumCuenta.setVisible(true);
                    condicion = false;
                } else if(NumCuenta_txt.getText().length() == 20){
                    if(!p.comprobacionIdentificacion(NumCuenta_txt.getText())){
                        AlertaNumCuenta.setVisible(true);
                        NumCuenta_txt.setBorder(borde_rojo);
                        condicion = false;
                    } else if(p.comprobacionIdentificacion(NumCuenta_txt.getText())){
                        AlertaNumCuenta.setVisible(false);
                        NumCuenta_txt.setBorder(borde_default);
                    }
                }
            }
            //5.5- Si el modo de cuenta es autorizado
            if(MOD_CB.getSelectedIndex() == 2){
                //5.5.1- Que el nombre no este vacio
                if(NombreAUT_txt.getText().isEmpty()){
                    NombreAUT_txt.setBorder(borde_rojo);
                    condicion = false;
                } else {
                    NombreAUT_txt.setBorder(borde_default);
                }
                //5.5.2- Que la identificacion sea valida
                if(IDAUT_txt.getText().isEmpty()){
                    IDAUT_txt.setBorder(borde_rojo);
                    condicion = false;
                } else if(!IDAUT_txt.getText().isEmpty() && (IDAUT_txt.getText().length() < 7)){
                    IDAUT_txt.setBorder(borde_rojo);
                    condicion = false;
                } else if(!IDAUT_txt.getText().isEmpty() && !(IDAUT_txt.getText().length() < 7)){
                    if(!p.comprobacionIdentificacion(IDAUT_txt.getText())){
                        IDAUT_txt.setBorder(borde_rojo);
                        condicion = false;
                    } else if(p.comprobacionIdentificacion(IDAUT_txt.getText())){
                        IDAUT_txt.setBorder(borde_default);
                    }
                }
            }
        }    
        return condicion;
    }
    
    private void GuardarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarBTActionPerformed
        /*
            1- GUARDAR LOS CAMBIOS DE PROVEEDOR
            2- GUARDAR LOS CAMBIOS DE BENEFICIARIO O CREAR NUEVO BENEFICIARIO
            3- IDENTIFICAR SI YA NO PERTENECE A LA TARIFA ESTANDAR EL PROVEEDOR
        */
        
        //=======================GUARDANDO LOS CAMBIOS DE PROVEEDOR=============================\\
        if(HabilitarCambiosBT.isSelected() && verificacionCompleta()){
            int codigo = Integer.parseInt(Codigotxt.getText());
            String identificacion = IdentificacionCB.getSelectedItem().toString();
            identificacion += Identificaciontxt.getText();
            String razonSocial = RazonSocialtxt.getText();
            String direccion = Direcciontxt.getText();
            String municipio = Municipiotxt.getText();
            String telefono = TipoTlftxt.getText();
            telefono += Tlftxt.getText();
            String correo = Mailtxt.getText();
            int peaje = Integer.parseInt(Peajetxt.getText());
            float Cuadrilla = Float.parseFloat(Cuadrillatxt.getText());
            float Flete = Float.parseFloat(Fletetxt.getText());
            String materia_prima = MPCB.getSelectedItem().toString();
            float MP_Acordado = 0;
            if(MPCB.getSelectedItem().toString().equals("ACORDADO")){
                MP_Acordado = Float.parseFloat(MP_Acordadotxt.getText());
            }
            
            //RECOGIENDO SUS TARIFAS QUE PERTENECEN A LA ESTANDAR
            Object[] data = new Object[3];
            boolean tarifa_estandar = false;
            int cod_tarifa = 0;
            if(TarifaEstandarBT.isSelected()){
                tarifa_estandar = true;
                data = TE.obtenerUltimaTarifa();
                cod_tarifa = Integer.parseInt(data[0].toString());
            }
            try {
                p.updateProveedorCodigo(codigo, identificacion, razonSocial, direccion, municipio, telefono, correo, materia_prima, MP_Acordado, Cuadrilla, Flete, peaje, cod_tarifa, tarifa_estandar);
                JOptionPane.showMessageDialog(null, "SE HAN GUARDADO LOS CAMBIOS CON EXITO", "EXITO EN LA ACCION", JOptionPane.PLAIN_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(TablaProveedores.class.getName()).log(Level.SEVERE, null, ex);
            }
            /*================================= GUARDAR CAMBIOS DE BENEFICIARIO===========================\\*/
            String nombre_beneficiario = "";
                String id_beneficiario = "";
                String mail_bnf = "";
                String banco = "";
                String num_cuenta = "";
                String Tipo_cuenta = "";
                String mod_cuenta = "";
                String name_autorizado = "";
                String ID_autorizado = "";
                int codigo_bnf = 0;
                if(!NombreBNF_txt.getText().isEmpty() && !IDBNF_txt.getText().isEmpty() && !NumCuenta_txt.getText().isEmpty()){
                    nombre_beneficiario = NombreBNF_txt.getText();
                    mail_bnf = CorreoBNF_txt.getText();
                    banco = Banco_CB.getSelectedItem().toString();
                    num_cuenta = NumCuenta_txt.getText();
                    id_beneficiario = IDBNF_CB.getSelectedItem().toString();
                    id_beneficiario += IDBNF_txt.getText();
                    codigo_bnf = b.retornaCodigo(this.identificacionBNF);
                    Tipo_cuenta = TCuenta_CB.getSelectedItem().toString();
                    mod_cuenta = MOD_CB.getSelectedItem().toString();
                    name_autorizado = NombreAUT_txt.getText();
                    ID_autorizado = IDAUT_CB.getSelectedItem().toString();
                    ID_autorizado += IDAUT_txt.getText();
                } else {
                        JOptionPane.showMessageDialog(null, "DEBE RELLENAR LOS CAMPOS OBLIGATORIOS DE BANCO Y EN SU DEBIDO FORMATO", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
                if(InformacionBancaria_BT.isSelected() && !NuevoBeneficiario_BT.isSelected()){
                    //CAMBIAR LOS DATOS AL BENEFICIARIO
                    b.updateBeneficiario(codigo_bnf, nombre_beneficiario, id_beneficiario, mail_bnf, banco, num_cuenta, Tipo_cuenta, mod_cuenta, name_autorizado, ID_autorizado);
                } else if (NuevoBeneficiario_BT.isSelected() && !InformacionBancaria_BT.isSelected()){
                    try {
                        //GUARDAR TODOS LOS DATOS EN VARIABLES
                        //Y CREAR UN NUEVO BENEFICIARIO
                        //CREAR LA RELACION
                        if(ListarBeneficiariosBT.getSelectedItem().toString().equals("Nuevo")){
                            b.NuevoBeneficiario(nombre_beneficiario, id_beneficiario, mail_bnf, banco, num_cuenta, Tipo_cuenta, mod_cuenta, name_autorizado, ID_autorizado);
                            int codigo_bnf2 = b.retornaCodigo(id_beneficiario);
                            boolean proveedorEncontrado = PB.encontrarProveedor(Integer.parseInt(Codigotxt.getText()));
                            if(!proveedorEncontrado){
                                PB.crear_relacion(Integer.parseInt(Codigotxt.getText()), codigo_bnf2);
                            } else {
                                //HACER UNA UPDATE DE LA RELACION
                                PB.updateRelacion(Integer.parseInt(Codigotxt.getText()), codigo_bnf2);
                            }
                        } else {
                            boolean proveedorEncontrado = PB.encontrarProveedor(Integer.parseInt(Codigotxt.getText()));
                            //SI ESTO ES CIERTO, TENGO QUE HACER UN UPDATE DE LA RELACION
                            int index = ListarBeneficiariosBT.getSelectedIndex();
                            index--;
                            int cod_bnf = b.retornaCodigo(id_beneficiario);
                            if(proveedorEncontrado){
                                //HACER LA UPDATE
                                PB.updateRelacion(Integer.parseInt(Codigotxt.getText()), cod_bnf);
                            } else if(!proveedorEncontrado){
                                //TENGO QUE CREAR LA RELACION
                                PB.crear_relacion(Integer.parseInt(Codigotxt.getText()), cod_bnf);
                            }
                        }          
                    } catch (SQLException ex) {
                        Logger.getLogger(TablaProveedores.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if(!NuevoBeneficiario_BT.isSelected() && !InformacionBancaria_BT.isSelected()){
                    JOptionPane.showMessageDialog(null, "NO SE CAMBIO LA INFORMACION DE BENEFICIARIO, PORQUE NINGUNA DE LAS OPCIONES SE HABILITARON", "AVISO", JOptionPane.PLAIN_MESSAGE);
                }
                updateTabla();
                seleccionado = false;
                SeleccionarBT.setSelected(false);
                reestablecerPagina();
        }
    }//GEN-LAST:event_GuardarBTActionPerformed

    private void HabilitarCambiosBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HabilitarCambiosBTActionPerformed
        this.identificacion = IdentificacionCB.getSelectedItem().toString() + Identificaciontxt.getText();
        this.identificacionBNF = IDBNF_CB.getSelectedItem().toString() + IDBNF_txt.getText();
        /*
            AQUI PRIMERO DEBERIA VERIFICAR SI SE HA HECHO UNA BUSQUEDA
            DESPUES PEDIMOS ADEMAS QUE SE HAYA SELECCIONADO UNA PERSONA DE LA TABLA
            (COMO A LA HORA DE SELECCIONAR YA VERIFICAMOS QUE SE HAYA SELECCIONADO ALGO
            SOLO NOS QUEDA VERIFICAR LA CONDICION BOLEANA DE SELECCIONADO)
        
            PARA DESPUES HABILITAR LOS CAMBIOS QUE SE REALICEN
        */
        if(seleccionado && HabilitarCambiosBT.isSelected()){
            //HABILITAR CAMPOS DE INFORMACION DE PROVEEDOR
            IdentificacionCB.setEnabled(true);
            Identificaciontxt.setEditable(true);
            RazonSocialtxt.setEditable(true);
            Direcciontxt.setEditable(true);
            Municipiotxt.setEditable(true);
            TipoTlftxt.setEditable(true);
            Tlftxt.setEditable(true);
            Mailtxt.setEditable(true);
            if(!NombreBNF_txt.getText().isEmpty()){
                InformacionBancaria_BT.setEnabled(true);
            } else {
                InformacionBancaria_BT.setEnabled(false);
            }
            
            NuevoBeneficiario_BT.setEnabled(true);
            TarifaEstandarBT.setEnabled(true);
            
            if(!TarifaEstandarBT.isSelected()){
                MPCB.setEnabled(true);
                Cuadrillatxt.setEditable(true);
                Fletetxt.setEditable(true);
                Peajetxt.setEditable(true);
                MP_Acordadotxt.setEditable(true);
            }
            GuardarBT.setEnabled(true);
            Peajetxt.setEditable(true);
            ActivarBT.setEnabled(false);
            DesactivarBT.setEnabled(false);
        } else if(seleccionado && !HabilitarCambiosBT.isSelected()){
            //DESHABILITAR LOS CAMBIOS
            IdentificacionCB.setEnabled(false);
            Identificaciontxt.setEditable(false);
            RazonSocialtxt.setEditable(false);
            Direcciontxt.setEditable(false);
            Municipiotxt.setEditable(false);
            TipoTlftxt.setEditable(false);
            Tlftxt.setEditable(false);
            Mailtxt.setEditable(false);
            InformacionBancaria_BT.setEnabled(false); InformacionBancaria_BT.setSelected(false);
            NuevoBeneficiario_BT.setEnabled(false); NuevoBeneficiario_BT.setSelected(false);
            ListarBeneficiariosBT.setEnabled(false);
            TarifaEstandarBT.setEnabled(false);
            
            
                MPCB.setEnabled(false);
                Cuadrillatxt.setEditable(false);
                Fletetxt.setEditable(false);
                Peajetxt.setEditable(false);
                MP_Acordadotxt.setEditable(false);
            
            GuardarBT.setEnabled(false);
            Peajetxt.setEditable(false);
            if(ActividadCB.getSelectedItem().toString().equals("Activo")){
                DesactivarBT.setEnabled(true);
            } else {
                ActivarBT.setEnabled(true);
            }
        } else if(!seleccionado){
            JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR EN LA TABLA A UN PROVEEDOR", "ERROR", JOptionPane.ERROR_MESSAGE);
            HabilitarCambiosBT.setSelected(false);    
        }
        
    }//GEN-LAST:event_HabilitarCambiosBTActionPerformed

    private void ActivarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActivarBTActionPerformed
        /*
            1- TIENE QUE HABER UN PROVEEDOR SELECCIONADO
            2- LA OPCION DE HABILITAR CAMBIOS NO PUEDE ESTAR ACTIVADA
        */
        if(seleccionado && !HabilitarCambiosBT.isSelected()){
            boolean necesidad_activar = false;
            //VERIFIQUEMOS PRIMERO SI ES NECESARIO ACTIVARLO
            String estado_actividad = ActividadCB.getSelectedItem().toString();
            if(estado_actividad.equals("Inactivo")){
                necesidad_activar = true;
            }
            
            if(necesidad_activar){
                //SE PREGUNTA SI SE DESEA HABILITAR EL PROVEEDOR
                String[] botones_confirmacionHabilitar = {"SI, SI DESEO HABILITAR", "NO, NO DESEO HABILITAR"};
                String[] botones_confirmacionHabilitarAccion = {"ACEPTAR", "CANCELAR"};
                int index = JOptionPane.showOptionDialog(null, "¿DESEA HABILITAR ESTE PROVEEDOR?", "CONFIRMACION DE CAMBIO DE ESTADO", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, botones_confirmacionHabilitar, botones_confirmacionHabilitar[0]);
                //EL INDEX = 0 REPRESENTA QUE SI DESEA HABILITAR
                //EL INDEX = 1 REPRESENTA QUE NO DESEA HABILITAR
                if(index == 0){
                    //AGARRAMOS EL CODIGO DEL PROVEEDOR
                    int codigo = Integer.parseInt(Codigotxt.getText());
                    try {
                        p.habilitarProveedor(codigo);
                        JOptionPane.showMessageDialog(null, "SE HA HABILITADO CON EXITO EL PROVEEDOR", "CONFIRMACION", JOptionPane.PLAIN_MESSAGE);
                        reestablecerPagina();
                        updateTabla();
                    } catch (SQLException ex) {
                        Logger.getLogger(TablaProveedores.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }else if(!necesidad_activar){
                JOptionPane.showMessageDialog(null, "ESTE PROVEEDOR NO NECESITA SER ACTIVADO", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else if (!seleccionado && !HabilitarCambiosBT.isSelected()){
            JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR EN LA TABLA A UN PROVEEDOR", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if(seleccionado && HabilitarCambiosBT.isSelected()){
            JOptionPane.showMessageDialog(null, "DEBE DESACTIVAR LA OPCION DE HABILITAR CAMBIOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if(!seleccionado && HabilitarCambiosBT.isSelected()){
            JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR EN LA TABLA A UN PROVEEDOR Y DESACTIVAR LA OPCION DE HABILITAR CAMBIOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ActivarBTActionPerformed

    private void DesactivarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DesactivarBTActionPerformed
                /*
            1- TIENE QUE HABER UN PROVEEDOR SELECCIONADO
            2- LA OPCION DE HABILITAR CAMBIOS NO PUEDE ESTAR ACTIVADA
        */
        if(seleccionado && !HabilitarCambiosBT.isSelected()){
            boolean necesidad_desactivar = false;
            //VERIFIQUEMOS PRIMERO SI ES NECESARIO ACTIVARLO
            String estado_desactividad = ActividadCB.getSelectedItem().toString();
            if(estado_desactividad.equals("Activo")){
                necesidad_desactivar = true;
            }
            
            if(necesidad_desactivar){
                //SE PREGUNTA SI SE DESEA HABILITAR EL PROVEEDOR
                String[] botones_confirmacionHabilitar = {"SI, SI DESEO INHABILITAR", "NO, NO DESEO INHABILITAR"};
                
                int index = JOptionPane.showOptionDialog(null, "¿DESEA INHABILITAR ESTE PROVEEDOR?", "CONFIRMACION DE CAMBIO DE ESTADO", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE, null, botones_confirmacionHabilitar, botones_confirmacionHabilitar[0]);
                //EL INDEX = 0 REPRESENTA QUE SI DESEA HABILITAR
                //EL INDEX = 1 REPRESENTA QUE NO DESEA HABILITAR
                if(index == 0){
                    //AGARRAMOS EL CODIGO DEL PROVEEDOR
                    int codigo = Integer.parseInt(Codigotxt.getText());
                    try {
                        p.deleteProveedor(codigo);
                        JOptionPane.showMessageDialog(null, "SE HA INHABILITADO CON EXITO EL PROVEEDOR", "CONFIRMACION", JOptionPane.PLAIN_MESSAGE);
                        reestablecerPagina();
                        updateTabla();
                    } catch (SQLException ex) {
                        Logger.getLogger(TablaProveedores.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }else if(!necesidad_desactivar){
                JOptionPane.showMessageDialog(null, "ESTE PROVEEDOR NO NECESITA SER DESHABILITADO", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } else if (!seleccionado && !HabilitarCambiosBT.isSelected()){
            JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR EN LA TABLA A UN PROVEEDOR", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if(seleccionado && HabilitarCambiosBT.isSelected()){
            JOptionPane.showMessageDialog(null, "DEBE DESACTIVAR LA OPCION DE HABILITAR CAMBIOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else if(!seleccionado && HabilitarCambiosBT.isSelected()){
            JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR EN LA TABLA A UN PROVEEDOR Y DESACTIVAR LA OPCION DE HABILITAR CAMBIOS", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DesactivarBTActionPerformed

    private void CerrarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CerrarBTActionPerformed
        this.dispose();
    }//GEN-LAST:event_CerrarBTActionPerformed

    private void reestablecerPagina(){
        seleccionado = false;
        cambiando_beneficiario = false;
        nuevo_beneficiario = false;
        tabla.setVisible(true);
        Codigotxt.setEditable(false); Codigotxt.setText("");
        IdentificacionCB.setEnabled(false); IdentificacionCB.setSelectedIndex(0);
        Identificaciontxt.setEditable(false); Identificaciontxt.setText("");
        RazonSocialtxt.setEditable(false); RazonSocialtxt.setText("");
        Direcciontxt.setEditable(false); Direcciontxt.setText("");
        Municipiotxt.setEditable(false); Municipiotxt.setText("");
        TipoTlftxt.setEditable(false); TipoTlftxt.setText("");
        Tlftxt.setEditable(false); Tlftxt.setText("");
        Mailtxt.setEditable(false); Mailtxt.setText("");
        ActividadCB.setSelectedIndex(0); ActividadCB.setEnabled(false);
        InformacionBancaria_BT.setEnabled(false); InformacionBancaria_BT.setSelected(false);
        NuevoBeneficiario_BT.setEnabled(false); NuevoBeneficiario_BT.setSelected(false);
        limpiarDatosBeneficiario();
        desHabilitarCamposBancarios();
        MPCB.setEnabled(false); MPCB.setSelectedIndex(0);
        Cuadrillatxt.setEditable(false); Cuadrillatxt.setText("");
        Fletetxt.setEditable(false); Fletetxt.setText("");
        Peajetxt.setEditable(false); Peajetxt.setText("");
        MP_Acordadotxt.setEditable(false); MP_Acordadotxt.setText("");
        SeleccionarBT.setSelected(false);
        HabilitarCambiosBT.setSelected(false);
        GuardarBT.setEnabled(false);
        DesactivarBT.setEnabled(false);
        ActivarBT.setEnabled(false);
        cargarDatosBeneficiarios();
    }
    
    /*
    private void reestablecerListaBeneficiarios(){
        
        ListarBeneficiariosBT.removeAllItems();
        ListarBeneficiariosBT.addItem("Nuevo");
        ListarBeneficiariosBT.setEnabled(false);
    }
    */
    
    private void SeleccionarBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeleccionarBTActionPerformed
        if(!Codigotxt.getText().isEmpty() && SeleccionarBT.isSelected()){
            tabla.setVisible(false);
            seleccionado = true;
            HabilitarCambiosBT.setEnabled(true);
            if(ActividadCB.getSelectedItem().toString().equals("Activo")){
                DesactivarBT.setEnabled(true);
            } else {
                ActivarBT.setEnabled(true);
            }
        } else if(HabilitarCambiosBT.isSelected()){
            JOptionPane.showMessageDialog(null, "TIENE LA OPCION DE HABILITAR ACTIVADA, DESACTIVELA PRIMERO", "ERROR", JOptionPane.ERROR_MESSAGE);
            SeleccionarBT.setSelected(true);
        } else if(!HabilitarCambiosBT.isSelected() && Codigotxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "DEBE SELECCIONAR EN LA TABLA A UN PROVEEDOR", "ERROR", JOptionPane.ERROR_MESSAGE);
            SeleccionarBT.setSelected(false);
        } else if(!SeleccionarBT.isSelected()){
            tabla.setVisible(true);
            seleccionado = false;
            HabilitarCambiosBT.setEnabled(false);
            DesactivarBT.setEnabled(false);
            ActivarBT.setEnabled(false);
        }
    }//GEN-LAST:event_SeleccionarBTActionPerformed

    private void InformacionBancaria_BTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InformacionBancaria_BTActionPerformed
        //HABILITAR LOS CAMPOS O DESACTIVARLOS
        if(InformacionBancaria_BT.isSelected() && !NuevoBeneficiario_BT.isSelected()){
            //HABILITAR LOS CAMBIOS DE LA INFORMACION BANCARIA
            //ADEMAS, MANTENEMOS UNA CONDICION QUE NOS INDIQUE QUE SE ESTAN CAMBIANDO LOS DATOS
            NombreBNF_txt.setEditable(true);
            IDBNF_CB.setEnabled(true);
            IDBNF_txt.setEditable(true);
            CorreoBNF_txt.setEditable(true);
            Banco_CB.setEnabled(true);
            NumCuenta_txt.setEditable(true);
            TCuenta_CB.setEnabled(true);
            MOD_CB.setEnabled(true);
            if(MOD_CB.getSelectedItem().toString().equals("Cuenta Autorizada")){
                NombreAUT_txt.setEditable(true);
                IDAUT_txt.setEditable(true);
                IDAUT_CB.setEnabled(true);
            }
            cambiando_beneficiario = true;
            NuevoBeneficiario_BT.setEnabled(false);
        } else if(!InformacionBancaria_BT.isSelected() && !NuevoBeneficiario_BT.isSelected()){
            NombreBNF_txt.setEditable(false);
            IDBNF_CB.setEnabled(false);
            IDBNF_txt.setEditable(false);
            CorreoBNF_txt.setEditable(false);
            Banco_CB.setEnabled(false);
            NumCuenta_txt.setEditable(false);
            TCuenta_CB.setEnabled(false);
            MOD_CB.setEnabled(false);
                NombreAUT_txt.setEditable(false);
                IDAUT_txt.setEditable(false);
                IDAUT_CB.setEnabled(false);
            cambiando_beneficiario = false;
            NuevoBeneficiario_BT.setEnabled(true);
        } else if(NuevoBeneficiario_BT.isSelected()){
            JOptionPane.showMessageDialog(null, "NO PUEDE CAMBIAR LA INFORMACION DE UN BENEFICIARIO CON LA OPCION DE NUEVO BENEFICIARIO ACTIVA", "ERROR", JOptionPane.ERROR_MESSAGE);
            
        }
    }//GEN-LAST:event_InformacionBancaria_BTActionPerformed

    private void NuevoBeneficiario_BTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoBeneficiario_BTActionPerformed
        if(InformacionBancaria_BT.isSelected()){
            JOptionPane.showMessageDialog(null, "NO PUEDE AGREGAR UN NUEVO BENEFICIARIO CON LA OPCION DE CAMBIAR DATOS DEL BENEFICIARIO ACTIVA", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else{
            if(!NuevoBeneficiario_BT.isSelected()){
                imprimirDatosBeneficiario();
                NombreAUT_txt.setEditable(false);
                IDAUT_txt.setEditable(false);
                IDAUT_CB.setEnabled(false);
                if(tiene_proveedor){
                    InformacionBancaria_BT.setEnabled(true);
                }
                
                ListarBeneficiariosBT.setEnabled(false);
            } else {
                limpiarDatosBeneficiario();
                habilitarCamposBancarios();
                InformacionBancaria_BT.setEnabled(false);
                ListarBeneficiariosBT.setEnabled(true);
            }
        }
        
    }//GEN-LAST:event_NuevoBeneficiario_BTActionPerformed

    private void ListarBeneficiariosBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ListarBeneficiariosBTActionPerformed
        if(ListarBeneficiariosBT.getSelectedItem().toString().equals("Nuevo") && ListarBeneficiariosBT.isEnabled()){
            NombreBNF_txt.setText("");
            IDBNF_txt.setText("");
            IDBNF_CB.setSelectedIndex(0);
            CorreoBNF_txt.setText("");
            Banco_CB.setSelectedIndex(0);
            NumCuenta_txt.setText("");
            TCuenta_CB.setSelectedIndex(0);
            MOD_CB.setSelectedIndex(0);
            NombreAUT_txt.setText("");
            IDAUT_CB.setSelectedIndex(0);
            IDAUT_txt.setText("");
            habilitarCamposBancarios();
        } else {
            int index = ListarBeneficiariosBT.getSelectedIndex();
            if(index != 0){
                imprimirDatosBeneficiario(index);
                desHabilitarCamposBancarios();
            }
        }
    }//GEN-LAST:event_ListarBeneficiariosBTActionPerformed
    
    private void imprimirDatosBeneficiario(int index){
        index--;
        String Name_Autorizado = dataBeneficiarios[index][1].toString();
        NombreBNF_txt.setText(Name_Autorizado);
        
        String ID_Beneficiario = dataBeneficiarios[index][2].toString();
        char char_id = ID_Beneficiario.charAt(0);
        int index_id = p.indexIdentificacion(char_id);
        IDBNF_CB.setSelectedIndex(index_id);
        IDBNF_txt.setText(ID_Beneficiario.substring(1, ID_Beneficiario.length()));
        
        CorreoBNF_txt.setText(dataBeneficiarios[index][3].toString());
        Banco_CB.setSelectedIndex(p.getindexBanco(dataBeneficiarios[index][4].toString()));
        NumCuenta_txt.setText(dataBeneficiarios[index][5].toString());
        TCuenta_CB.setSelectedIndex(p.indexTipoCuenta(dataBeneficiarios[index][6].toString()));
        MOD_CB.setSelectedIndex(p.indexmod_Cuenta(dataBeneficiarios[index][7].toString()));
        if(dataBeneficiarios[index][7].toString().equals("Cuenta Autorizada")){
            NombreAUT_txt.setText(dataBeneficiarios[index][8].toString());
            String ID_autorizado = dataBeneficiarios[index][9].toString();
            System.out.println(ID_autorizado);
            char char_autorizado = ID_autorizado.charAt(0);
            int index_autorizado = p.indexIdentificacion(char_autorizado);
            IDAUT_CB.setSelectedIndex(index_autorizado);
            IDAUT_txt.setText(ID_autorizado.substring(1, ID_autorizado.length()));
            
            
        } else {
            IDAUT_CB.setSelectedIndex(0);
            IDAUT_txt.setText("");
            NombreAUT_txt.setText("");
        }

    }
    
    private void cargarDatosBeneficiarios(){
        registros = b.cantidadRegistros();
        cedulaBeneficiarios = new String[registros];
        dataBeneficiarios = b.getDatos();
        for(int i = 0; i <= registros - 1; i++){
            String item = dataBeneficiarios[i][1].toString();
            item += "   -   " + dataBeneficiarios[i][2].toString();
            ListarBeneficiariosBT.addItem(item);
            cedulaBeneficiarios[i] = dataBeneficiarios[i][2].toString();
        }
    }
    
    private void desHabilitarCamposBancarios(){
        NombreBNF_txt.setEditable(false);
        IDBNF_txt.setEditable(false);
        IDBNF_CB.setEnabled(false);
        CorreoBNF_txt.setEditable(false);
        Banco_CB.setEnabled(false);
        NumCuenta_txt.setEditable(false);
        TCuenta_CB.setEnabled(false);
        MOD_CB.setEnabled(false);
        NombreAUT_txt.setEditable(false);
        IDAUT_CB.setEnabled(false);
        IDAUT_txt.setEditable(false);
        ListarBeneficiariosBT.setEnabled(false);
    }
    
    private void habilitarCamposBancarios(){
        NombreBNF_txt.setEditable(true);
        IDBNF_txt.setEditable(true);
        IDBNF_CB.setEnabled(true);
        CorreoBNF_txt.setEditable(true);
        Banco_CB.setEnabled(true);
        NumCuenta_txt.setEditable(true);
        TCuenta_CB.setEnabled(true);
        MOD_CB.setEnabled(true);
        NombreAUT_txt.setEditable(true);
        IDAUT_CB.setEnabled(true);
        IDAUT_txt.setEditable(true);
    }
    
    private void limpiarDatosBeneficiario(){
        InformacionBancaria_BT.setSelected(false);
        NombreBNF_txt.setText("");
        IDBNF_txt.setText("");
        IDBNF_CB.setSelectedIndex(0); 
        CorreoBNF_txt.setText("");
        Banco_CB.setSelectedIndex(0);
        NumCuenta_txt.setText("");
        TCuenta_CB.setSelectedIndex(0);
        MOD_CB.setSelectedIndex(0);
        NombreAUT_txt.setText("");
        IDAUT_CB.setSelectedIndex(0);
        IDAUT_txt.setText("");
        ListarBeneficiariosBT.setSelectedIndex(0);
                
    }
    
    private void mostrarTodos(){
        //Objeto para almacenar datos;
        Object[][] data;
        String[] columNames = {"Codigo", "Identificacion", "Razon Social", "Direccion", "Municipio", "Telefono", "Email", "Cuadrilla","Flete","Peaje","Materia Prima", "MP_Acordado","Codigo Tarifa","Nombre de Beneficiario", "Cedula Beneficiario", "Correo Beneficiario", "Entidad Bancaria", "Numero Cuenta", "Tipo de Cuenta", "Modo de Cuenta", "Nombre Autorizado" , "Cedula Autorizado", "Estado"};
        try {
            //se utiliza la funcion
            data = p.getDatos();
            DefaultTableModel datos = new DefaultTableModel(data, columNames);
            tabla.setModel(datos);
        } catch (SQLException ex) {
            Logger.getLogger(TablaProveedores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void updateTabla(){
        String[] columNames = {"Codigo", "Identificacion", "Razon Social", "Direccion", "Municipio", "Telefono", "Email", "Cuadrilla","Flete","Peaje","Materia Prima","MP_Acordado","Codigo Tarifa","Nombre de Beneficiario", "Cedula Beneficiario", "Correo Beneficiario", "Entidad Bancaria", "Numero Cuenta", "Tipo de Cuenta", "Modo de Cuenta", "Nombre Autorizado" , "Cedula Autorizado", "Estado"};
        try{
            data = p.getDatos();
            DefaultTableModel datos = new DefaultTableModel(data, columNames);
            tabla.setModel(datos);
        }catch(SQLException ex){
            Logger.getLogger(TablaProveedores.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void nuevos(){
        Codigotxt.setText("");
        IdentificacionCB.setSelectedIndex(0);
        Identificaciontxt.setText("");
        RazonSocialtxt.setText("");
        Direcciontxt.setText("");
        Municipiotxt.setText("");
        TipoTlftxt.setText("");
        Tlftxt.setText("");
        Mailtxt.setText("");
        NombreBNF_txt.setText("");
        IDBNF_CB.setSelectedIndex(0);
        IDBNF_txt.setText("");
        CorreoBNF_txt.setText("");
        Banco_CB.setSelectedIndex(0);
        NumCuenta_txt.setText("");
        TCuenta_CB.setSelectedIndex(0);
        MOD_CB.setSelectedIndex(0);
        NombreAUT_txt.setText("");
        IDAUT_CB.setSelectedIndex(0);
        IDAUT_txt.setText("");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TablaProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TablaProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TablaProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TablaProveedores.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TablaProveedores().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ActivarBT;
    private javax.swing.JComboBox<String> ActividadCB;
    private javax.swing.JLabel ActividadL;
    private javax.swing.JLabel AlertaNumCuenta;
    private javax.swing.JLabel BancoL6;
    private javax.swing.JComboBox<String> Banco_CB;
    private javax.swing.JButton CerrarBT;
    private javax.swing.JLabel CodigoL;
    private javax.swing.JTextField Codigotxt;
    private javax.swing.JTextField CorreoBNF_txt;
    private javax.swing.JLabel CuadrillaLB;
    private javax.swing.JTextField Cuadrillatxt;
    private javax.swing.JButton DesactivarBT;
    private javax.swing.JLabel DireccionL;
    private javax.swing.JTextField Direcciontxt;
    private javax.swing.JLabel FleteLB;
    private javax.swing.JTextField Fletetxt;
    private javax.swing.JLabel FotoIdentificacionv;
    private javax.swing.JButton GuardarBT;
    private javax.swing.JToggleButton HabilitarCambiosBT;
    private javax.swing.JComboBox<String> IDAUT_CB;
    private javax.swing.JTextField IDAUT_txt;
    private javax.swing.JLabel IDAutL6;
    private javax.swing.JComboBox<String> IDBNF_CB;
    private javax.swing.JTextField IDBNF_txt;
    private javax.swing.JLabel IDL6;
    private javax.swing.JComboBox<String> IdentificacionCB;
    private javax.swing.JLabel IdentificacionL;
    private javax.swing.JLabel IdentificacionProveedor;
    private javax.swing.JLabel IdentificacionProveedor1;
    private javax.swing.JLabel IdentificacionProveedor4;
    private javax.swing.JTextField Identificaciontxt;
    private javax.swing.JLabel InformacionBancariaL6;
    private javax.swing.JToggleButton InformacionBancaria_BT;
    private javax.swing.JPanel JPanelBancario;
    private javax.swing.JPanel JPanelPagos;
    private javax.swing.JComboBox<String> ListarBeneficiariosBT;
    private javax.swing.JLabel LogoInformacionBancaria6;
    private javax.swing.JLabel MODL6;
    private javax.swing.JComboBox<String> MOD_CB;
    private javax.swing.JComboBox<String> MPCB;
    private javax.swing.JLabel MPLB;
    private javax.swing.JLabel MP_AcordadoLB;
    private javax.swing.JTextField MP_Acordadotxt;
    private javax.swing.JLabel MailBnfL6;
    private javax.swing.JLabel MailL;
    private javax.swing.JTextField Mailtxt;
    private javax.swing.JLabel MunicipioLB;
    private javax.swing.JTextField Municipiotxt;
    private javax.swing.JLabel NameAutL6;
    private javax.swing.JLabel NameBnfL6;
    private javax.swing.JTextField NombreAUT_txt;
    private javax.swing.JTextField NombreBNF_txt;
    private javax.swing.JToggleButton NuevoBeneficiario_BT;
    private javax.swing.JLabel NumCuentaL6;
    private javax.swing.JTextField NumCuenta_txt;
    private javax.swing.JPanel PanelDeIdentificacion;
    private javax.swing.JTextField Peajetxt;
    private javax.swing.JLabel RazonSocialL;
    private javax.swing.JTextField RazonSocialtxt;
    private javax.swing.JToggleButton SeleccionarBT;
    private javax.swing.JLabel TCuentaL6;
    private javax.swing.JComboBox<String> TCuenta_CB;
    private javax.swing.JToggleButton TarifaEstandarBT;
    private javax.swing.JTextField TipoTlftxt;
    private javax.swing.JLabel TlfL;
    private javax.swing.JTextField Tlftxt;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabla;
    // End of variables declaration//GEN-END:variables
}
